
../apps/bin/hello:     file format elf64-littleriscv

SYMBOL TABLE:
0000000000000000 l     F .text	000000000000001a sig_trampoline
0000000000000008 l     O .bss	0000000000000004 g_errno
0000000000000dd2 g     F .text	0000000000000014 clock_gettime
0000000000000bba g     F .text	0000000000000012 nxsem_get_value
0000000000000e0a g     F .text	000000000000000e nx_pthread_exit
00000000000002d4 g     F .text	0000000000000034 lib_fflush
0000000000000e18 g     F .text	0000000000000016 nxsem_clockwait
000000000000050e g     F .text	000000000000000a task_get_info
00000000000005ae g     F .text	0000000000000022 nxmutex_is_locked
000000000000083e g     F .text	0000000000000004 nxrmutex_get_holder
00000000000007ea g     F .text	000000000000000e nxmutex_restorelock
0000000000000d82 g     F .text	000000000000001e pthread_exit
0000000000000de6 g     F .text	000000000000000c gettid
0000000000000a38 g     F .text	000000000000002a nxrmutex_restorelock
0000000000000518 g     F .text	000000000000001a __errno
0000000000000e7c g       .text	0000000000000000 _etext
0000000000000008 g       .bss	0000000000000000 _sbss
000000000000024c g     F .text	0000000000000088 lib_fflush_unlocked
0000000000000a62 g     F .text	000000000000006c task_setcancelstate
00000000000005aa g     F .text	0000000000000004 nxmutex_get_holder
00000000000004e0 g     F .text	000000000000001c memcpy
0000000000000ace g     F .text	000000000000003c nxsem_init
000000000000005a g     F .text	000000000000008a puts
0000000000000e80 g       .rodata	0000000000000000 _srodata
00000000000004b6 g     F .text	000000000000001e quick_exit
0000000000000e7c g       .init_array	0000000000000000 _einit
0000000000000dae g     F .text	0000000000000018 _assert
0000000000000800 g     F .text	000000000000000c nxrmutex_init
0000000000000e2e g     F .text	000000000000000e nxsem_destroy
0000000000000000  w    O .sdata.__dso_handle	0000000000000008 __dso_handle
000000000000063e g     F .text	000000000000002e nxmutex_trylock
0000000000000f8c g       .data	0000000000000000 _sdata
00000000000005d0 g     F .text	000000000000006e nxmutex_lock
00000000000009f6 g     F .text	0000000000000042 nxrmutex_breaklock
0000000000000c40 g     F .text	0000000000000046 fflush
000000000000056a g     F .text	0000000000000020 nxmutex_destroy
0000000000000df2 g     F .text	0000000000000018 lseek
00000000000004d4 g     F .text	000000000000000c _Exit
0000000000000da0 g     F .text	000000000000000e abort
00000000000008f2 g     F .text	000000000000005c nxrmutex_clocklock
000000000000043e g     F .text	000000000000000a ftrylockfile
0000000000000842 g     F .text	0000000000000008 nxrmutex_is_locked
000000000000000c g       .bss	0000000000000000 _ebss
0000000000000308 g     F .text	000000000000005a lib_rdflush_unlocked
0000000000000e66 g     F .text	0000000000000016 write
0000000000000362 g     F .text	0000000000000098 fputs_unlocked
00000000000009a6 g     F .text	0000000000000050 nxrmutex_unlock
000000000000001a g     F .text	0000000000000024 __start
0000000000000532 g     F .text	0000000000000038 nxmutex_init
000000000000074a g     F .text	0000000000000066 nxmutex_unlock
0000000000000b0a g     F .text	0000000000000040 sem_init
00000000000006d2 g     F .text	0000000000000078 nxmutex_timedlock
0000000000000e3c g     F .text	000000000000000e nxsem_post
0000000000000448 g     F .text	000000000000000a funlockfile
00000000000007b0 g     F .text	000000000000003a nxmutex_breaklock
0000000000000e58 g     F .text	000000000000000e nxsem_wait
0000000000000e4a g     F .text	000000000000000e nxsem_trywait
0000000000000468 g     F .text	0000000000000026 lib_get_stream
0000000000000b8c g     F .text	000000000000002e sem_setprotocol
000000000000020e g     F .text	000000000000003e lib_fwrite
0000000000000452 g     F .text	0000000000000016 lib_get_streams
000000000000003e g     F .text	000000000000001c main
00000000000007f8 g     F .text	0000000000000008 nxmutex_set_protocol
000000000000058a g     F .text	0000000000000020 nxmutex_is_hold
0000000000000c86 g     F .text	0000000000000068 lib_flushall_unlocked
000000000000094e g     F .text	0000000000000058 nxrmutex_timedlock
000000000000066c g     F .text	0000000000000066 nxmutex_clocklock
000000000000084a g     F .text	0000000000000054 nxrmutex_lock
0000000000000e7c g       .init_array	0000000000000000 _sinit
0000000000000434 g     F .text	000000000000000a flockfile
0000000000000bfa g     F .text	0000000000000046 fflush_unlocked
000000000000080c g     F .text	0000000000000020 nxrmutex_destroy
0000000000000f8c g       .data	0000000000000000 _edata
000000000000082c g     F .text	0000000000000008 nxrmutex_is_hold
0000000000000834 g     F .text	000000000000000a nxrmutex_is_recursive
0000000000000bcc g     F .text	000000000000002e sem_getvalue
0000000000000b4a g     F .text	0000000000000042 nxsem_set_protocol
000000000000048e g     F .text	0000000000000028 exit
0000000000000cee g     F .text	000000000000007e lib_flushall
0000000000000dc6 g     F .text	000000000000000c _exit
000000000000089e g     F .text	0000000000000054 nxrmutex_trylock
0000000000000000 g       .text	0000000000000000 _stext
00000000000004fc g     F .text	0000000000000012 strlen
0000000000000d6c g     F .text	0000000000000016 __assert
00000000000003fa g     F .text	000000000000003a fputs
00000000000000e4 g     F .text	000000000000012a lib_fwrite_unlocked
0000000000000f8c g       .rodata	0000000000000000 _erodata



Disassembly of section .text:

0000000000000000 <sig_trampoline>:
sig_trampoline():
   0:	1141                	add	sp,sp,-16
   2:	e006                	sd	ra,0(sp)
   4:	82aa                	mv	t0,a0
   6:	852e                	mv	a0,a1
   8:	85b2                	mv	a1,a2
   a:	8636                	mv	a2,a3
   c:	9282                	jalr	t0
   e:	6082                	ld	ra,0(sp)
  10:	0141                	add	sp,sp,16
  12:	4515                	li	a0,5
  14:	00000073          	ecall
  18:	0001                	nop

000000000000001a <__start>:
__start():
  1a:	1141                	add	sp,sp,-16
  1c:	00c017b7          	lui	a5,0xc01
  20:	e406                	sd	ra,8(sp)
  22:	07a2                	sll	a5,a5,0x8
  24:	00000717          	auipc	a4,0x0	24: R_RISCV_PCREL_HI20	sig_trampoline
	24: R_RISCV_RELAX	*ABS*
  28:	00070713          	mv	a4,a4	28: R_RISCV_PCREL_LO12_I	.L0 
	28: R_RISCV_RELAX	*ABS*
  2c:	e398                	sd	a4,0(a5)
  2e:	00000097          	auipc	ra,0x0	2e: R_RISCV_CALL_PLT	main
	2e: R_RISCV_RELAX	*ABS*
  32:	000080e7          	jalr	ra # 2e <__start+0x14>
  36:	00000097          	auipc	ra,0x0	36: R_RISCV_CALL_PLT	exit
	36: R_RISCV_RELAX	*ABS*
  3a:	000080e7          	jalr	ra # 36 <__start+0x1c>

000000000000003e <main>:
main():
  3e:	1141                	add	sp,sp,-16
  40:	00000517          	auipc	a0,0x0	40: R_RISCV_PCREL_HI20	.LC0
	40: R_RISCV_RELAX	*ABS*
  44:	00050513          	mv	a0,a0	44: R_RISCV_PCREL_LO12_I	.L0 
	44: R_RISCV_RELAX	*ABS*
  48:	e406                	sd	ra,8(sp)
  4a:	00000097          	auipc	ra,0x0	4a: R_RISCV_CALL_PLT	puts
	4a: R_RISCV_RELAX	*ABS*
  4e:	000080e7          	jalr	ra # 4a <main+0xc>
  52:	60a2                	ld	ra,8(sp)
  54:	4501                	li	a0,0
  56:	0141                	add	sp,sp,16
  58:	8082                	ret

000000000000005a <puts>:
puts():
  5a:	7179                	add	sp,sp,-48
  5c:	f022                	sd	s0,32(sp)
  5e:	842a                	mv	s0,a0
  60:	4505                	li	a0,1
  62:	f406                	sd	ra,40(sp)
  64:	ec26                	sd	s1,24(sp)
  66:	00000097          	auipc	ra,0x0	66: R_RISCV_CALL_PLT	lib_get_stream
	66: R_RISCV_RELAX	*ABS*
  6a:	000080e7          	jalr	ra # 66 <puts+0xc>
  6e:	84aa                	mv	s1,a0
  70:	00000097          	auipc	ra,0x0	70: R_RISCV_CALL_PLT	flockfile
	70: R_RISCV_RELAX	*ABS*
  74:	000080e7          	jalr	ra # 70 <puts+0x16>
  78:	85a6                	mv	a1,s1
  7a:	8522                	mv	a0,s0
  7c:	00000097          	auipc	ra,0x0	7c: R_RISCV_CALL_PLT	fputs_unlocked
	7c: R_RISCV_RELAX	*ABS*
  80:	000080e7          	jalr	ra # 7c <puts+0x22>
  84:	02054163          	bltz	a0,a6 <.L7>	84: R_RISCV_BRANCH	.L7
  88:	47a9                	li	a5,10
  8a:	842a                	mv	s0,a0
  8c:	8626                	mv	a2,s1
  8e:	4585                	li	a1,1
  90:	00f10513          	add	a0,sp,15
  94:	00f107a3          	sb	a5,15(sp)
  98:	00000097          	auipc	ra,0x0	98: R_RISCV_CALL_PLT	lib_fwrite_unlocked
	98: R_RISCV_RELAX	*ABS*
  9c:	000080e7          	jalr	ra # 98 <puts+0x3e>
  a0:	2501                	sext.w	a0,a0
  a2:	00a04463          	bgtz	a0,aa <.L3>	a2: R_RISCV_BRANCH	.L3

00000000000000a6 <.L7>:
  a6:	547d                	li	s0,-1
  a8:	a839                	j	c6 <.L2>	a8: R_RISCV_RVC_JUMP	.L2

00000000000000aa <.L3>:
  aa:	0ba4c783          	lbu	a5,186(s1)
  ae:	2405                	addw	s0,s0,1
  b0:	8b91                	and	a5,a5,4
  b2:	cb91                	beqz	a5,c6 <.L2>	b2: R_RISCV_RVC_BRANCH	.L2
  b4:	8526                	mv	a0,s1
  b6:	00000097          	auipc	ra,0x0	b6: R_RISCV_CALL_PLT	lib_fflush_unlocked
	b6: R_RISCV_RELAX	*ABS*
  ba:	000080e7          	jalr	ra # b6 <.L3+0xc>
  be:	02051793          	sll	a5,a0,0x20
  c2:	fe07c2e3          	bltz	a5,a6 <.L7>	c2: R_RISCV_BRANCH	.L7

00000000000000c6 <.L2>:
  c6:	4505                	li	a0,1
  c8:	00000097          	auipc	ra,0x0	c8: R_RISCV_CALL_PLT	lib_get_stream
	c8: R_RISCV_RELAX	*ABS*
  cc:	000080e7          	jalr	ra # c8 <.L2+0x2>
  d0:	00000097          	auipc	ra,0x0	d0: R_RISCV_CALL_PLT	funlockfile
	d0: R_RISCV_RELAX	*ABS*
  d4:	000080e7          	jalr	ra # d0 <.L2+0xa>
  d8:	70a2                	ld	ra,40(sp)
  da:	8522                	mv	a0,s0
  dc:	7402                	ld	s0,32(sp)
  de:	64e2                	ld	s1,24(sp)
  e0:	6145                	add	sp,sp,48
  e2:	8082                	ret

00000000000000e4 <lib_fwrite_unlocked>:
lib_fwrite_unlocked():
  e4:	7179                	add	sp,sp,-48
  e6:	f406                	sd	ra,40(sp)
  e8:	f022                	sd	s0,32(sp)
  ea:	ec26                	sd	s1,24(sp)
  ec:	e84a                	sd	s2,16(sp)
  ee:	e44e                	sd	s3,8(sp)
  f0:	e052                	sd	s4,0(sp)
  f2:	e205                	bnez	a2,112 <.L2>	f2: R_RISCV_RVC_BRANCH	.L2
  f4:	00000097          	auipc	ra,0x0	f4: R_RISCV_CALL_PLT	__errno
	f4: R_RISCV_RELAX	*ABS*
  f8:	000080e7          	jalr	ra # f4 <lib_fwrite_unlocked+0x10>
  fc:	47a5                	li	a5,9
  fe:	c11c                	sw	a5,0(a0)
 100:	557d                	li	a0,-1

0000000000000102 <.L1>:
 102:	70a2                	ld	ra,40(sp)
 104:	7402                	ld	s0,32(sp)
 106:	64e2                	ld	s1,24(sp)
 108:	6942                	ld	s2,16(sp)
 10a:	69a2                	ld	s3,8(sp)
 10c:	6a02                	ld	s4,0(sp)
 10e:	6145                	add	sp,sp,48
 110:	8082                	ret

0000000000000112 <.L2>:
 112:	0b865783          	lhu	a5,184(a2)
 116:	84b2                	mv	s1,a2
 118:	8b89                	and	a5,a5,2
 11a:	ef99                	bnez	a5,138 <.L4>	11a: R_RISCV_RVC_BRANCH	.L4
 11c:	00000097          	auipc	ra,0x0	11c: R_RISCV_CALL_PLT	__errno
	11c: R_RISCV_RELAX	*ABS*
 120:	000080e7          	jalr	ra # 11c <.L2+0xa>
 124:	47a5                	li	a5,9
 126:	c11c                	sw	a5,0(a0)

0000000000000128 <.L5>:
 128:	557d                	li	a0,-1

000000000000012a <.L9>:
 12a:	0ba4c783          	lbu	a5,186(s1)
 12e:	0027e793          	or	a5,a5,2
 132:	0af48d23          	sb	a5,186(s1)
 136:	b7f1                	j	102 <.L1>	136: R_RISCV_RVC_JUMP	.L1

0000000000000138 <.L4>:
 138:	6e3c                	ld	a5,88(a2)
 13a:	89aa                	mv	s3,a0
 13c:	892e                	mv	s2,a1
 13e:	e385                	bnez	a5,15e <.L6>	13e: R_RISCV_RVC_BRANCH	.L6
 140:	7e1c                	ld	a5,56(a2)
 142:	6a28                	ld	a0,80(a2)
 144:	862e                	mv	a2,a1
 146:	85ce                	mv	a1,s3
 148:	c789                	beqz	a5,152 <.L7>	148: R_RISCV_RVC_BRANCH	.L7
 14a:	9782                	jalr	a5

000000000000014c <.L8>:
 14c:	fa055be3          	bgez	a0,102 <.L1>	14c: R_RISCV_BRANCH	.L1
 150:	bfe1                	j	128 <.L5>	150: R_RISCV_RVC_JUMP	.L5

0000000000000152 <.L7>:
 152:	2501                	sext.w	a0,a0
 154:	00000097          	auipc	ra,0x0	154: R_RISCV_CALL_PLT	write
	154: R_RISCV_RELAX	*ABS*
 158:	000080e7          	jalr	ra # 154 <.L7+0x2>
 15c:	bfc5                	j	14c <.L8>	15c: R_RISCV_RVC_JUMP	.L8

000000000000015e <.L6>:
 15e:	8532                	mv	a0,a2
 160:	00000097          	auipc	ra,0x0	160: R_RISCV_CALL_PLT	lib_rdflush_unlocked
	160: R_RISCV_RELAX	*ABS*
 164:	000080e7          	jalr	ra # 160 <.L6+0x2>
 168:	fc0540e3          	bltz	a0,128 <.L5>	168: R_RISCV_BRANCH	.L5
 16c:	74a8                	ld	a0,104(s1)
 16e:	70a0                	ld	s0,96(s1)
 170:	04000793          	li	a5,64
 174:	8c09                	sub	s0,s0,a0
 176:	00f41663          	bne	s0,a5,182 <.L11>	176: R_RISCV_BRANCH	.L11
 17a:	03f00793          	li	a5,63
 17e:	0727e063          	bltu	a5,s2,1de <.L20>	17e: R_RISCV_BRANCH	.L20

0000000000000182 <.L11>:
 182:	00897363          	bgeu	s2,s0,188 <.L13>	182: R_RISCV_BRANCH	.L13
 186:	844a                	mv	s0,s2

0000000000000188 <.L13>:
 188:	8622                	mv	a2,s0
 18a:	85ce                	mv	a1,s3
 18c:	00000097          	auipc	ra,0x0	18c: R_RISCV_CALL_PLT	memcpy
	18c: R_RISCV_RELAX	*ABS*
 190:	000080e7          	jalr	ra # 18c <.L13+0x4>
 194:	74bc                	ld	a5,104(s1)
 196:	70b8                	ld	a4,96(s1)
 198:	40890a33          	sub	s4,s2,s0
 19c:	97a2                	add	a5,a5,s0
 19e:	f4bc                	sd	a5,104(s1)
 1a0:	944e                	add	s0,s0,s3
 1a2:	02e7f463          	bgeu	a5,a4,1ca <.L14>	1a2: R_RISCV_BRANCH	.L14

00000000000001a6 <.L16>:
 1a6:	03f00793          	li	a5,63
 1aa:	0547f363          	bgeu	a5,s4,1f0 <.L24>	1aa: R_RISCV_BRANCH	.L24

00000000000001ae <.L12>:
 1ae:	7c9c                	ld	a5,56(s1)
 1b0:	68a8                	ld	a0,80(s1)
 1b2:	8652                	mv	a2,s4
 1b4:	85a2                	mv	a1,s0
 1b6:	c79d                	beqz	a5,1e4 <.L17>	1b6: R_RISCV_RVC_BRANCH	.L17
 1b8:	9782                	jalr	a5

00000000000001ba <.L18>:
 1ba:	942a                	add	s0,s0,a0
 1bc:	f60546e3          	bltz	a0,128 <.L5>	1bc: R_RISCV_BRANCH	.L5

00000000000001c0 <.L19>:
 1c0:	41340533          	sub	a0,s0,s3
 1c4:	f2055fe3          	bgez	a0,102 <.L1>	1c4: R_RISCV_BRANCH	.L1
 1c8:	b78d                	j	12a <.L9>	1c8: R_RISCV_RVC_JUMP	.L9

00000000000001ca <.L14>:
 1ca:	8526                	mv	a0,s1
 1cc:	00000097          	auipc	ra,0x0	1cc: R_RISCV_CALL_PLT	lib_fflush_unlocked
	1cc: R_RISCV_RELAX	*ABS*
 1d0:	000080e7          	jalr	ra # 1cc <.L14+0x2>
 1d4:	02051793          	sll	a5,a0,0x20
 1d8:	fc07d7e3          	bgez	a5,1a6 <.L16>	1d8: R_RISCV_BRANCH	.L16
 1dc:	b7b1                	j	128 <.L5>	1dc: R_RISCV_RVC_JUMP	.L5

00000000000001de <.L20>:
 1de:	844e                	mv	s0,s3
 1e0:	8a4a                	mv	s4,s2
 1e2:	b7f1                	j	1ae <.L12>	1e2: R_RISCV_RVC_JUMP	.L12

00000000000001e4 <.L17>:
 1e4:	2501                	sext.w	a0,a0
 1e6:	00000097          	auipc	ra,0x0	1e6: R_RISCV_CALL_PLT	write
	1e6: R_RISCV_RELAX	*ABS*
 1ea:	000080e7          	jalr	ra # 1e6 <.L17+0x2>
 1ee:	b7f1                	j	1ba <.L18>	1ee: R_RISCV_RVC_JUMP	.L18

00000000000001f0 <.L24>:
 1f0:	fc0a08e3          	beqz	s4,1c0 <.L19>	1f0: R_RISCV_BRANCH	.L19
 1f4:	74a8                	ld	a0,104(s1)
 1f6:	85a2                	mv	a1,s0
 1f8:	8652                	mv	a2,s4
 1fa:	00000097          	auipc	ra,0x0	1fa: R_RISCV_CALL_PLT	memcpy
	1fa: R_RISCV_RELAX	*ABS*
 1fe:	000080e7          	jalr	ra # 1fa <.L24+0xa>
 202:	74bc                	ld	a5,104(s1)
 204:	01298433          	add	s0,s3,s2
 208:	97d2                	add	a5,a5,s4
 20a:	f4bc                	sd	a5,104(s1)
 20c:	bf55                	j	1c0 <.L19>	20c: R_RISCV_RVC_JUMP	.L19

000000000000020e <lib_fwrite>:
lib_fwrite():
 20e:	7179                	add	sp,sp,-48
 210:	ec26                	sd	s1,24(sp)
 212:	84aa                	mv	s1,a0
 214:	8532                	mv	a0,a2
 216:	f406                	sd	ra,40(sp)
 218:	f022                	sd	s0,32(sp)
 21a:	e42e                	sd	a1,8(sp)
 21c:	8432                	mv	s0,a2
 21e:	00000097          	auipc	ra,0x0	21e: R_RISCV_CALL_PLT	flockfile
	21e: R_RISCV_RELAX	*ABS*
 222:	000080e7          	jalr	ra # 21e <lib_fwrite+0x10>
 226:	65a2                	ld	a1,8(sp)
 228:	8622                	mv	a2,s0
 22a:	8526                	mv	a0,s1
 22c:	00000097          	auipc	ra,0x0	22c: R_RISCV_CALL_PLT	lib_fwrite_unlocked
	22c: R_RISCV_RELAX	*ABS*
 230:	000080e7          	jalr	ra # 22c <lib_fwrite+0x1e>
 234:	84aa                	mv	s1,a0
 236:	8522                	mv	a0,s0
 238:	00000097          	auipc	ra,0x0	238: R_RISCV_CALL_PLT	funlockfile
	238: R_RISCV_RELAX	*ABS*
 23c:	000080e7          	jalr	ra # 238 <lib_fwrite+0x2a>
 240:	70a2                	ld	ra,40(sp)
 242:	7402                	ld	s0,32(sp)
 244:	8526                	mv	a0,s1
 246:	64e2                	ld	s1,24(sp)
 248:	6145                	add	sp,sp,48
 24a:	8082                	ret

000000000000024c <lib_fflush_unlocked>:
lib_fflush_unlocked():
 24c:	0b855783          	lhu	a5,184(a0) # f8 <lib_fwrite_unlocked+0x14>
 250:	8b89                	and	a5,a5,2
 252:	cfbd                	beqz	a5,2d0 <.L8>	252: R_RISCV_RVC_BRANCH	.L8
 254:	1101                	add	sp,sp,-32
 256:	e822                	sd	s0,16(sp)
 258:	ec06                	sd	ra,24(sp)
 25a:	e426                	sd	s1,8(sp)
 25c:	e04a                	sd	s2,0(sp)
 25e:	05853903          	ld	s2,88(a0)
 262:	842a                	mv	s0,a0
 264:	4501                	li	a0,0
 266:	02090f63          	beqz	s2,2a4 <.L1>	266: R_RISCV_BRANCH	.L1
 26a:	7424                	ld	s1,104(s0)
 26c:	04990e63          	beq	s2,s1,2c8 <.L3>	26c: R_RISCV_BRANCH	.L3
 270:	783c                	ld	a5,112(s0)
 272:	02f91963          	bne	s2,a5,2a4 <.L1>	272: R_RISCV_BRANCH	.L1
 276:	412484b3          	sub	s1,s1,s2

000000000000027a <.L7>:
 27a:	7c1c                	ld	a5,56(s0)
 27c:	6828                	ld	a0,80(s0)
 27e:	8626                	mv	a2,s1
 280:	85ca                	mv	a1,s2
 282:	c79d                	beqz	a5,2b0 <.L4>	282: R_RISCV_RVC_BRANCH	.L4
 284:	9782                	jalr	a5

0000000000000286 <.L5>:
 286:	02055b63          	bgez	a0,2bc <.L6>	286: R_RISCV_BRANCH	.L6
 28a:	0ba44783          	lbu	a5,186(s0)
 28e:	0027e793          	or	a5,a5,2
 292:	0af40d23          	sb	a5,186(s0)
 296:	00000097          	auipc	ra,0x0	296: R_RISCV_CALL_PLT	__errno
	296: R_RISCV_RELAX	*ABS*
 29a:	000080e7          	jalr	ra # 296 <.L5+0x10>
 29e:	4108                	lw	a0,0(a0)
 2a0:	40a0053b          	negw	a0,a0

00000000000002a4 <.L1>:
 2a4:	60e2                	ld	ra,24(sp)
 2a6:	6442                	ld	s0,16(sp)
 2a8:	64a2                	ld	s1,8(sp)
 2aa:	6902                	ld	s2,0(sp)
 2ac:	6105                	add	sp,sp,32
 2ae:	8082                	ret

00000000000002b0 <.L4>:
 2b0:	2501                	sext.w	a0,a0
 2b2:	00000097          	auipc	ra,0x0	2b2: R_RISCV_CALL_PLT	write
	2b2: R_RISCV_RELAX	*ABS*
 2b6:	000080e7          	jalr	ra # 2b2 <.L4+0x2>
 2ba:	b7f1                	j	286 <.L5>	2ba: R_RISCV_RVC_JUMP	.L5

00000000000002bc <.L6>:
 2bc:	8c89                	sub	s1,s1,a0
 2be:	992a                	add	s2,s2,a0
 2c0:	fa904de3          	bgtz	s1,27a <.L7>	2c0: R_RISCV_BRANCH	.L7
 2c4:	6c3c                	ld	a5,88(s0)
 2c6:	f43c                	sd	a5,104(s0)

00000000000002c8 <.L3>:
 2c8:	7428                	ld	a0,104(s0)
 2ca:	6c3c                	ld	a5,88(s0)
 2cc:	8d1d                	sub	a0,a0,a5
 2ce:	bfd9                	j	2a4 <.L1>	2ce: R_RISCV_RVC_JUMP	.L1

00000000000002d0 <.L8>:
 2d0:	555d                	li	a0,-9
 2d2:	8082                	ret

00000000000002d4 <lib_fflush>:
lib_fflush():
 2d4:	1101                	add	sp,sp,-32
 2d6:	ec06                	sd	ra,24(sp)
 2d8:	e822                	sd	s0,16(sp)
 2da:	e426                	sd	s1,8(sp)
 2dc:	842a                	mv	s0,a0
 2de:	00000097          	auipc	ra,0x0	2de: R_RISCV_CALL_PLT	flockfile
	2de: R_RISCV_RELAX	*ABS*
 2e2:	000080e7          	jalr	ra # 2de <lib_fflush+0xa>
 2e6:	8522                	mv	a0,s0
 2e8:	00000097          	auipc	ra,0x0	2e8: R_RISCV_CALL_PLT	lib_fflush_unlocked
	2e8: R_RISCV_RELAX	*ABS*
 2ec:	000080e7          	jalr	ra # 2e8 <lib_fflush+0x14>
 2f0:	84aa                	mv	s1,a0
 2f2:	8522                	mv	a0,s0
 2f4:	00000097          	auipc	ra,0x0	2f4: R_RISCV_CALL_PLT	funlockfile
	2f4: R_RISCV_RELAX	*ABS*
 2f8:	000080e7          	jalr	ra # 2f4 <lib_fflush+0x20>
 2fc:	60e2                	ld	ra,24(sp)
 2fe:	6442                	ld	s0,16(sp)
 300:	8526                	mv	a0,s1
 302:	64a2                	ld	s1,8(sp)
 304:	6105                	add	sp,sp,32
 306:	8082                	ret

0000000000000308 <lib_rdflush_unlocked>:
lib_rdflush_unlocked():
 308:	1101                	add	sp,sp,-32
 30a:	ec06                	sd	ra,24(sp)
 30c:	e919                	bnez	a0,322 <.L2>	30c: R_RISCV_RVC_BRANCH	.L2
 30e:	00000097          	auipc	ra,0x0	30e: R_RISCV_CALL_PLT	__errno
	30e: R_RISCV_RELAX	*ABS*
 312:	000080e7          	jalr	ra # 30e <lib_rdflush_unlocked+0x6>
 316:	47a5                	li	a5,9
 318:	c11c                	sw	a5,0(a0)

000000000000031a <.L3>:
 31a:	557d                	li	a0,-1

000000000000031c <.L8>:
 31c:	60e2                	ld	ra,24(sp)
 31e:	6105                	add	sp,sp,32
 320:	8082                	ret

0000000000000322 <.L2>:
 322:	6d38                	ld	a4,88(a0)
 324:	c71d                	beqz	a4,352 <.L4>	324: R_RISCV_RVC_BRANCH	.L4
 326:	7934                	ld	a3,112(a0)
 328:	02d70563          	beq	a4,a3,352 <.L4>	328: R_RISCV_BRANCH	.L4
 32c:	753c                	ld	a5,104(a0)
 32e:	0bb54603          	lbu	a2,187(a0)
 332:	f938                	sd	a4,112(a0)
 334:	9f95                	subw	a5,a5,a3
 336:	40c785bb          	subw	a1,a5,a2
 33a:	613c                	ld	a5,64(a0)
 33c:	f538                	sd	a4,104(a0)
 33e:	0a050da3          	sb	zero,187(a0)
 342:	c62e                	sw	a1,12(sp)
 344:	6928                	ld	a0,80(a0)
 346:	4605                	li	a2,1
 348:	c799                	beqz	a5,356 <.L5>	348: R_RISCV_RVC_BRANCH	.L5
 34a:	006c                	add	a1,sp,12
 34c:	9782                	jalr	a5

000000000000034e <.L6>:
 34e:	fc0546e3          	bltz	a0,31a <.L3>	34e: R_RISCV_BRANCH	.L3

0000000000000352 <.L4>:
 352:	4501                	li	a0,0
 354:	b7e1                	j	31c <.L8>	354: R_RISCV_RVC_JUMP	.L8

0000000000000356 <.L5>:
 356:	2501                	sext.w	a0,a0
 358:	00000097          	auipc	ra,0x0	358: R_RISCV_CALL_PLT	lseek
	358: R_RISCV_RELAX	*ABS*
 35c:	000080e7          	jalr	ra # 358 <.L5+0x2>
 360:	b7fd                	j	34e <.L6>	360: R_RISCV_RVC_JUMP	.L6

0000000000000362 <fputs_unlocked>:
fputs_unlocked():
 362:	7179                	add	sp,sp,-48
 364:	ec26                	sd	s1,24(sp)
 366:	e84a                	sd	s2,16(sp)
 368:	f406                	sd	ra,40(sp)
 36a:	f022                	sd	s0,32(sp)
 36c:	e44e                	sd	s3,8(sp)
 36e:	0ba5c783          	lbu	a5,186(a1)
 372:	892a                	mv	s2,a0
 374:	84ae                	mv	s1,a1
 376:	8b91                	and	a5,a5,4
 378:	efb5                	bnez	a5,3f4 <.L11>	378: R_RISCV_RVC_BRANCH	.L11
 37a:	00000097          	auipc	ra,0x0	37a: R_RISCV_CALL_PLT	strlen
	37a: R_RISCV_RELAX	*ABS*
 37e:	000080e7          	jalr	ra # 37a <fputs_unlocked+0x18>
 382:	2501                	sext.w	a0,a0
 384:	cd05                	beqz	a0,3bc <.L5>	384: R_RISCV_RVC_BRANCH	.L5
 386:	85aa                	mv	a1,a0
 388:	8626                	mv	a2,s1
 38a:	854a                	mv	a0,s2
 38c:	00000097          	auipc	ra,0x0	38c: R_RISCV_CALL_PLT	lib_fwrite_unlocked
	38c: R_RISCV_RELAX	*ABS*
 390:	000080e7          	jalr	ra # 38c <fputs_unlocked+0x2a>
 394:	02051793          	sll	a5,a0,0x20
 398:	842a                	mv	s0,a0
 39a:	0007d363          	bgez	a5,3a0 <.L10>	39a: R_RISCV_BRANCH	.L10
 39e:	547d                	li	s0,-1

00000000000003a0 <.L10>:
 3a0:	0004051b          	sext.w	a0,s0
 3a4:	a821                	j	3bc <.L5>	3a4: R_RISCV_RVC_JUMP	.L5

00000000000003a6 <.L9>:
 3a6:	8626                	mv	a2,s1
 3a8:	4585                	li	a1,1
 3aa:	8522                	mv	a0,s0
 3ac:	00000097          	auipc	ra,0x0	3ac: R_RISCV_CALL_PLT	lib_fwrite_unlocked
	3ac: R_RISCV_RELAX	*ABS*
 3b0:	000080e7          	jalr	ra # 3ac <.L9+0x6>
 3b4:	2501                	sext.w	a0,a0
 3b6:	00a04a63          	bgtz	a0,3ca <.L4>	3b6: R_RISCV_BRANCH	.L4

00000000000003ba <.L7>:
 3ba:	557d                	li	a0,-1

00000000000003bc <.L5>:
 3bc:	70a2                	ld	ra,40(sp)
 3be:	7402                	ld	s0,32(sp)
 3c0:	64e2                	ld	s1,24(sp)
 3c2:	6942                	ld	s2,16(sp)
 3c4:	69a2                	ld	s3,8(sp)
 3c6:	6145                	add	sp,sp,48
 3c8:	8082                	ret

00000000000003ca <.L4>:
 3ca:	00044783          	lbu	a5,0(s0)
 3ce:	01378963          	beq	a5,s3,3e0 <.L6>	3ce: R_RISCV_BRANCH	.L6

00000000000003d2 <.L8>:
 3d2:	0405                	add	s0,s0,1

00000000000003d4 <.L2>:
 3d4:	00044783          	lbu	a5,0(s0)
 3d8:	f7f9                	bnez	a5,3a6 <.L9>	3d8: R_RISCV_RVC_BRANCH	.L9
 3da:	4124053b          	subw	a0,s0,s2
 3de:	bff9                	j	3bc <.L5>	3de: R_RISCV_RVC_JUMP	.L5

00000000000003e0 <.L6>:
 3e0:	8526                	mv	a0,s1
 3e2:	00000097          	auipc	ra,0x0	3e2: R_RISCV_CALL_PLT	lib_fflush_unlocked
	3e2: R_RISCV_RELAX	*ABS*
 3e6:	000080e7          	jalr	ra # 3e2 <.L6+0x2>
 3ea:	02051793          	sll	a5,a0,0x20
 3ee:	fe07d2e3          	bgez	a5,3d2 <.L8>	3ee: R_RISCV_BRANCH	.L8
 3f2:	b7e1                	j	3ba <.L7>	3f2: R_RISCV_RVC_JUMP	.L7

00000000000003f4 <.L11>:
 3f4:	842a                	mv	s0,a0
 3f6:	49a9                	li	s3,10
 3f8:	bff1                	j	3d4 <.L2>	3f8: R_RISCV_RVC_JUMP	.L2

00000000000003fa <fputs>:
fputs():
 3fa:	1101                	add	sp,sp,-32
 3fc:	e426                	sd	s1,8(sp)
 3fe:	84aa                	mv	s1,a0
 400:	852e                	mv	a0,a1
 402:	ec06                	sd	ra,24(sp)
 404:	e822                	sd	s0,16(sp)
 406:	842e                	mv	s0,a1
 408:	00000097          	auipc	ra,0x0	408: R_RISCV_CALL_PLT	flockfile
	408: R_RISCV_RELAX	*ABS*
 40c:	000080e7          	jalr	ra # 408 <fputs+0xe>
 410:	85a2                	mv	a1,s0
 412:	8526                	mv	a0,s1
 414:	00000097          	auipc	ra,0x0	414: R_RISCV_CALL_PLT	fputs_unlocked
	414: R_RISCV_RELAX	*ABS*
 418:	000080e7          	jalr	ra # 414 <fputs+0x1a>
 41c:	84aa                	mv	s1,a0
 41e:	8522                	mv	a0,s0
 420:	00000097          	auipc	ra,0x0	420: R_RISCV_CALL_PLT	funlockfile
	420: R_RISCV_RELAX	*ABS*
 424:	000080e7          	jalr	ra # 420 <fputs+0x26>
 428:	60e2                	ld	ra,24(sp)
 42a:	6442                	ld	s0,16(sp)
 42c:	8526                	mv	a0,s1
 42e:	64a2                	ld	s1,8(sp)
 430:	6105                	add	sp,sp,32
 432:	8082                	ret

0000000000000434 <flockfile>:
flockfile():
 434:	0521                	add	a0,a0,8
 436:	00000317          	auipc	t1,0x0	436: R_RISCV_CALL_PLT	nxrmutex_lock
	436: R_RISCV_RELAX	*ABS*
 43a:	00030067          	jr	t1 # 436 <flockfile+0x2>

000000000000043e <ftrylockfile>:
ftrylockfile():
 43e:	0521                	add	a0,a0,8
 440:	00000317          	auipc	t1,0x0	440: R_RISCV_CALL_PLT	nxrmutex_trylock
	440: R_RISCV_RELAX	*ABS*
 444:	00030067          	jr	t1 # 440 <ftrylockfile+0x2>

0000000000000448 <funlockfile>:
funlockfile():
 448:	0521                	add	a0,a0,8
 44a:	00000317          	auipc	t1,0x0	44a: R_RISCV_CALL_PLT	nxrmutex_unlock
	44a: R_RISCV_RELAX	*ABS*
 44e:	00030067          	jr	t1 # 44a <funlockfile+0x2>

0000000000000452 <lib_get_streams>:
lib_get_streams():
 452:	1141                	add	sp,sp,-16
 454:	e406                	sd	ra,8(sp)
 456:	00000097          	auipc	ra,0x0	456: R_RISCV_CALL_PLT	task_get_info
	456: R_RISCV_RELAX	*ABS*
 45a:	000080e7          	jalr	ra # 456 <lib_get_streams+0x4>
 45e:	60a2                	ld	ra,8(sp)
 460:	02050513          	add	a0,a0,32
 464:	0141                	add	sp,sp,16
 466:	8082                	ret

0000000000000468 <lib_get_stream>:
lib_get_stream():
 468:	1141                	add	sp,sp,-16
 46a:	e022                	sd	s0,0(sp)
 46c:	e406                	sd	ra,8(sp)
 46e:	842a                	mv	s0,a0
 470:	00000097          	auipc	ra,0x0	470: R_RISCV_CALL_PLT	task_get_info
	470: R_RISCV_RELAX	*ABS*
 474:	000080e7          	jalr	ra # 470 <lib_get_stream+0x8>
 478:	0c000793          	li	a5,192
 47c:	02f40433          	mul	s0,s0,a5
 480:	60a2                	ld	ra,8(sp)
 482:	04040413          	add	s0,s0,64
 486:	9522                	add	a0,a0,s0
 488:	6402                	ld	s0,0(sp)
 48a:	0141                	add	sp,sp,16
 48c:	8082                	ret

000000000000048e <exit>:
exit():
 48e:	1141                	add	sp,sp,-16
 490:	e022                	sd	s0,0(sp)
 492:	4581                	li	a1,0
 494:	842a                	mv	s0,a0
 496:	4505                	li	a0,1
 498:	e406                	sd	ra,8(sp)
 49a:	00000097          	auipc	ra,0x0	49a: R_RISCV_CALL_PLT	task_setcancelstate
	49a: R_RISCV_RELAX	*ABS*
 49e:	000080e7          	jalr	ra # 49a <exit+0xc>
 4a2:	4501                	li	a0,0
 4a4:	00000097          	auipc	ra,0x0	4a4: R_RISCV_CALL_PLT	fflush
	4a4: R_RISCV_RELAX	*ABS*
 4a8:	000080e7          	jalr	ra # 4a4 <exit+0x16>
 4ac:	8522                	mv	a0,s0
 4ae:	00000097          	auipc	ra,0x0	4ae: R_RISCV_CALL_PLT	_exit
	4ae: R_RISCV_RELAX	*ABS*
 4b2:	000080e7          	jalr	ra # 4ae <exit+0x20>

00000000000004b6 <quick_exit>:
quick_exit():
 4b6:	1141                	add	sp,sp,-16
 4b8:	e022                	sd	s0,0(sp)
 4ba:	4581                	li	a1,0
 4bc:	842a                	mv	s0,a0
 4be:	4505                	li	a0,1
 4c0:	e406                	sd	ra,8(sp)
 4c2:	00000097          	auipc	ra,0x0	4c2: R_RISCV_CALL_PLT	task_setcancelstate
	4c2: R_RISCV_RELAX	*ABS*
 4c6:	000080e7          	jalr	ra # 4c2 <quick_exit+0xc>
 4ca:	8522                	mv	a0,s0
 4cc:	00000097          	auipc	ra,0x0	4cc: R_RISCV_CALL_PLT	_exit
	4cc: R_RISCV_RELAX	*ABS*
 4d0:	000080e7          	jalr	ra # 4cc <quick_exit+0x16>

00000000000004d4 <_Exit>:
_Exit():
 4d4:	1141                	add	sp,sp,-16
 4d6:	e406                	sd	ra,8(sp)
 4d8:	00000097          	auipc	ra,0x0	4d8: R_RISCV_CALL_PLT	_exit
	4d8: R_RISCV_RELAX	*ABS*
 4dc:	000080e7          	jalr	ra # 4d8 <_Exit+0x4>

00000000000004e0 <memcpy>:
memcpy():
 4e0:	4781                	li	a5,0

00000000000004e2 <.L2>:
 4e2:	00f61363          	bne	a2,a5,4e8 <.L3>	4e2: R_RISCV_BRANCH	.L3
 4e6:	8082                	ret

00000000000004e8 <.L3>:
 4e8:	00f58733          	add	a4,a1,a5
 4ec:	00074683          	lbu	a3,0(a4) # 24 <__start+0xa>
 4f0:	00f50733          	add	a4,a0,a5
 4f4:	0785                	add	a5,a5,1 # c01001 <_edata+0xc00075>
 4f6:	00d70023          	sb	a3,0(a4)
 4fa:	b7e5                	j	4e2 <.L2>	4fa: R_RISCV_RVC_JUMP	.L2

00000000000004fc <strlen>:
strlen():
 4fc:	87aa                	mv	a5,a0

00000000000004fe <.L2>:
 4fe:	0007c703          	lbu	a4,0(a5)
 502:	e701                	bnez	a4,50a <.L3>	502: R_RISCV_RVC_BRANCH	.L3
 504:	40a78533          	sub	a0,a5,a0
 508:	8082                	ret

000000000000050a <.L3>:
 50a:	0785                	add	a5,a5,1
 50c:	bfcd                	j	4fe <.L2>	50c: R_RISCV_RVC_JUMP	.L2

000000000000050e <task_get_info>:
task_get_info():
 50e:	7779                	lui	a4,0xffffe
 510:	878a                	mv	a5,sp
 512:	8ff9                	and	a5,a5,a4
 514:	6388                	ld	a0,0(a5)
 516:	8082                	ret

0000000000000518 <__errno>:
__errno():
 518:	6709                	lui	a4,0x2
 51a:	00000517          	auipc	a0,0x0	51a: R_RISCV_PCREL_HI20	g_errno
	51a: R_RISCV_RELAX	*ABS*
 51e:	00050513          	mv	a0,a0	51e: R_RISCV_PCREL_LO12_I	.L0 
	51e: R_RISCV_RELAX	*ABS*
 522:	878a                	mv	a5,sp
 524:	00e7e663          	bltu	a5,a4,530 <.L1>	524: R_RISCV_BRANCH	.L1
 528:	7779                	lui	a4,0xffffe
 52a:	8ff9                	and	a5,a5,a4
 52c:	00c78513          	add	a0,a5,12

0000000000000530 <.L1>:
 530:	8082                	ret

0000000000000532 <nxmutex_init>:
nxmutex_init():
 532:	1101                	add	sp,sp,-32
 534:	4605                	li	a2,1
 536:	4581                	li	a1,0
 538:	e822                	sd	s0,16(sp)
 53a:	e426                	sd	s1,8(sp)
 53c:	ec06                	sd	ra,24(sp)
 53e:	84aa                	mv	s1,a0
 540:	00000097          	auipc	ra,0x0	540: R_RISCV_CALL_PLT	nxsem_init
	540: R_RISCV_RELAX	*ABS*
 544:	000080e7          	jalr	ra # 540 <nxmutex_init+0xe>
 548:	842a                	mv	s0,a0
 54a:	00054a63          	bltz	a0,55e <.L2>	54a: R_RISCV_BRANCH	.L2
 54e:	57fd                	li	a5,-1
 550:	cc9c                	sw	a5,24(s1)
 552:	4591                	li	a1,4
 554:	8526                	mv	a0,s1
 556:	00000097          	auipc	ra,0x0	556: R_RISCV_CALL_PLT	nxsem_set_protocol
	556: R_RISCV_RELAX	*ABS*
 55a:	000080e7          	jalr	ra # 556 <nxmutex_init+0x24>

000000000000055e <.L2>:
 55e:	60e2                	ld	ra,24(sp)
 560:	8522                	mv	a0,s0
 562:	6442                	ld	s0,16(sp)
 564:	64a2                	ld	s1,8(sp)
 566:	6105                	add	sp,sp,32
 568:	8082                	ret

000000000000056a <nxmutex_destroy>:
nxmutex_destroy():
 56a:	1141                	add	sp,sp,-16
 56c:	e022                	sd	s0,0(sp)
 56e:	e406                	sd	ra,8(sp)
 570:	842a                	mv	s0,a0
 572:	00000097          	auipc	ra,0x0	572: R_RISCV_CALL_PLT	nxsem_destroy
	572: R_RISCV_RELAX	*ABS*
 576:	000080e7          	jalr	ra # 572 <nxmutex_destroy+0x8>
 57a:	00054463          	bltz	a0,582 <.L5>	57a: R_RISCV_BRANCH	.L5
 57e:	57fd                	li	a5,-1
 580:	cc1c                	sw	a5,24(s0)

0000000000000582 <.L5>:
 582:	60a2                	ld	ra,8(sp)
 584:	6402                	ld	s0,0(sp)
 586:	0141                	add	sp,sp,16
 588:	8082                	ret

000000000000058a <nxmutex_is_hold>:
nxmutex_is_hold():
 58a:	1141                	add	sp,sp,-16
 58c:	e406                	sd	ra,8(sp)
 58e:	e022                	sd	s0,0(sp)
 590:	4d00                	lw	s0,24(a0)
 592:	00000097          	auipc	ra,0x0	592: R_RISCV_CALL_PLT	gettid
	592: R_RISCV_RELAX	*ABS*
 596:	000080e7          	jalr	ra # 592 <nxmutex_is_hold+0x8>
 59a:	60a2                	ld	ra,8(sp)
 59c:	40a40533          	sub	a0,s0,a0
 5a0:	6402                	ld	s0,0(sp)
 5a2:	00153513          	seqz	a0,a0
 5a6:	0141                	add	sp,sp,16
 5a8:	8082                	ret

00000000000005aa <nxmutex_get_holder>:
nxmutex_get_holder():
 5aa:	4d08                	lw	a0,24(a0)
 5ac:	8082                	ret

00000000000005ae <nxmutex_is_locked>:
nxmutex_is_locked():
 5ae:	1101                	add	sp,sp,-32
 5b0:	006c                	add	a1,sp,12
 5b2:	ec06                	sd	ra,24(sp)
 5b4:	00000097          	auipc	ra,0x0	5b4: R_RISCV_CALL_PLT	nxsem_get_value
	5b4: R_RISCV_RELAX	*ABS*
 5b8:	000080e7          	jalr	ra # 5b4 <nxmutex_is_locked+0x6>
 5bc:	00054863          	bltz	a0,5cc <.L12>	5bc: R_RISCV_BRANCH	.L12
 5c0:	4532                	lw	a0,12(sp)
 5c2:	00152513          	slti	a0,a0,1

00000000000005c6 <.L11>:
 5c6:	60e2                	ld	ra,24(sp)
 5c8:	6105                	add	sp,sp,32
 5ca:	8082                	ret

00000000000005cc <.L12>:
 5cc:	4501                	li	a0,0
 5ce:	bfe5                	j	5c6 <.L11>	5ce: R_RISCV_RVC_JUMP	.L11

00000000000005d0 <nxmutex_lock>:
nxmutex_lock():
 5d0:	7179                	add	sp,sp,-48
 5d2:	ec26                	sd	s1,24(sp)
 5d4:	f406                	sd	ra,40(sp)
 5d6:	f022                	sd	s0,32(sp)
 5d8:	e84a                	sd	s2,16(sp)
 5da:	e44e                	sd	s3,8(sp)
 5dc:	84aa                	mv	s1,a0
 5de:	00000097          	auipc	ra,0x0	5de: R_RISCV_CALL_PLT	nxmutex_is_hold
	5de: R_RISCV_RELAX	*ABS*
 5e2:	000080e7          	jalr	ra # 5de <nxmutex_lock+0xe>
 5e6:	e90d                	bnez	a0,618 <.L21>	5e6: R_RISCV_RVC_BRANCH	.L21
 5e8:	59f1                	li	s3,-4
 5ea:	f8300913          	li	s2,-125

00000000000005ee <.L19>:
 5ee:	8526                	mv	a0,s1
 5f0:	00000097          	auipc	ra,0x0	5f0: R_RISCV_CALL_PLT	nxsem_wait
	5f0: R_RISCV_RELAX	*ABS*
 5f4:	000080e7          	jalr	ra # 5f0 <.L19+0x2>
 5f8:	842a                	mv	s0,a0
 5fa:	02054d63          	bltz	a0,634 <.L16>	5fa: R_RISCV_BRANCH	.L16
 5fe:	00000097          	auipc	ra,0x0	5fe: R_RISCV_CALL_PLT	gettid
	5fe: R_RISCV_RELAX	*ABS*
 602:	000080e7          	jalr	ra # 5fe <.L19+0x10>
 606:	cc88                	sw	a0,24(s1)

0000000000000608 <.L17>:
 608:	70a2                	ld	ra,40(sp)
 60a:	8522                	mv	a0,s0
 60c:	7402                	ld	s0,32(sp)
 60e:	64e2                	ld	s1,24(sp)
 610:	6942                	ld	s2,16(sp)
 612:	69a2                	ld	s3,8(sp)
 614:	6145                	add	sp,sp,48
 616:	8082                	ret

0000000000000618 <.L21>:
 618:	00000617          	auipc	a2,0x0	618: R_RISCV_PCREL_HI20	.LC0
	618: R_RISCV_RELAX	*ABS*
 61c:	00060613          	mv	a2,a2	61c: R_RISCV_PCREL_LO12_I	.L0 
	61c: R_RISCV_RELAX	*ABS*
 620:	0fc00593          	li	a1,252
 624:	00000517          	auipc	a0,0x0	624: R_RISCV_PCREL_HI20	.LC1
	624: R_RISCV_RELAX	*ABS*
 628:	00050513          	mv	a0,a0	628: R_RISCV_PCREL_LO12_I	.L0 
	628: R_RISCV_RELAX	*ABS*
 62c:	00000097          	auipc	ra,0x0	62c: R_RISCV_CALL_PLT	__assert
	62c: R_RISCV_RELAX	*ABS*
 630:	000080e7          	jalr	ra # 62c <.L21+0x14>

0000000000000634 <.L16>:
 634:	fb350de3          	beq	a0,s3,5ee <.L19>	634: R_RISCV_BRANCH	.L19
 638:	fb250be3          	beq	a0,s2,5ee <.L19>	638: R_RISCV_BRANCH	.L19
 63c:	b7f1                	j	608 <.L17>	63c: R_RISCV_RVC_JUMP	.L17

000000000000063e <nxmutex_trylock>:
nxmutex_trylock():
 63e:	1101                	add	sp,sp,-32
 640:	e822                	sd	s0,16(sp)
 642:	e426                	sd	s1,8(sp)
 644:	ec06                	sd	ra,24(sp)
 646:	84aa                	mv	s1,a0
 648:	00000097          	auipc	ra,0x0	648: R_RISCV_CALL_PLT	nxsem_trywait
	648: R_RISCV_RELAX	*ABS*
 64c:	000080e7          	jalr	ra # 648 <nxmutex_trylock+0xa>
 650:	842a                	mv	s0,a0
 652:	00054763          	bltz	a0,660 <.L24>	652: R_RISCV_BRANCH	.L24
 656:	00000097          	auipc	ra,0x0	656: R_RISCV_CALL_PLT	gettid
	656: R_RISCV_RELAX	*ABS*
 65a:	000080e7          	jalr	ra # 656 <nxmutex_trylock+0x18>
 65e:	cc88                	sw	a0,24(s1)

0000000000000660 <.L24>:
 660:	60e2                	ld	ra,24(sp)
 662:	8522                	mv	a0,s0
 664:	6442                	ld	s0,16(sp)
 666:	64a2                	ld	s1,8(sp)
 668:	6105                	add	sp,sp,32
 66a:	8082                	ret

000000000000066c <nxmutex_clocklock>:
nxmutex_clocklock():
 66c:	7139                	add	sp,sp,-64
 66e:	f426                	sd	s1,40(sp)
 670:	f04a                	sd	s2,32(sp)
 672:	ec4e                	sd	s3,24(sp)
 674:	e852                	sd	s4,16(sp)
 676:	e456                	sd	s5,8(sp)
 678:	fc06                	sd	ra,56(sp)
 67a:	f822                	sd	s0,48(sp)
 67c:	84aa                	mv	s1,a0
 67e:	89ae                	mv	s3,a1
 680:	8932                	mv	s2,a2
 682:	5af1                	li	s5,-4
 684:	f8300a13          	li	s4,-125

0000000000000688 <.L31>:
 688:	02090f63          	beqz	s2,6c6 <.L27>	688: R_RISCV_BRANCH	.L27
 68c:	864a                	mv	a2,s2
 68e:	85ce                	mv	a1,s3
 690:	8526                	mv	a0,s1
 692:	00000097          	auipc	ra,0x0	692: R_RISCV_CALL_PLT	nxsem_clockwait
	692: R_RISCV_RELAX	*ABS*
 696:	000080e7          	jalr	ra # 692 <.L31+0xa>

000000000000069a <.L33>:
 69a:	842a                	mv	s0,a0
 69c:	ff5506e3          	beq	a0,s5,688 <.L31>	69c: R_RISCV_BRANCH	.L31
 6a0:	ff4504e3          	beq	a0,s4,688 <.L31>	6a0: R_RISCV_BRANCH	.L31
 6a4:	00054763          	bltz	a0,6b2 <.L30>	6a4: R_RISCV_BRANCH	.L30
 6a8:	00000097          	auipc	ra,0x0	6a8: R_RISCV_CALL_PLT	gettid
	6a8: R_RISCV_RELAX	*ABS*
 6ac:	000080e7          	jalr	ra # 6a8 <.L33+0xe>
 6b0:	cc88                	sw	a0,24(s1)

00000000000006b2 <.L30>:
 6b2:	70e2                	ld	ra,56(sp)
 6b4:	8522                	mv	a0,s0
 6b6:	7442                	ld	s0,48(sp)
 6b8:	74a2                	ld	s1,40(sp)
 6ba:	7902                	ld	s2,32(sp)
 6bc:	69e2                	ld	s3,24(sp)
 6be:	6a42                	ld	s4,16(sp)
 6c0:	6aa2                	ld	s5,8(sp)
 6c2:	6121                	add	sp,sp,64
 6c4:	8082                	ret

00000000000006c6 <.L27>:
 6c6:	8526                	mv	a0,s1
 6c8:	00000097          	auipc	ra,0x0	6c8: R_RISCV_CALL_PLT	nxsem_wait
	6c8: R_RISCV_RELAX	*ABS*
 6cc:	000080e7          	jalr	ra # 6c8 <.L27+0x2>
 6d0:	b7e9                	j	69a <.L33>	6d0: R_RISCV_RVC_JUMP	.L33

00000000000006d2 <nxmutex_timedlock>:
nxmutex_timedlock():
 6d2:	7139                	add	sp,sp,-64
 6d4:	f822                	sd	s0,48(sp)
 6d6:	f426                	sd	s1,40(sp)
 6d8:	842e                	mv	s0,a1
 6da:	84aa                	mv	s1,a0
 6dc:	858a                	mv	a1,sp
 6de:	4505                	li	a0,1
 6e0:	fc06                	sd	ra,56(sp)
 6e2:	00000097          	auipc	ra,0x0	6e2: R_RISCV_CALL_PLT	clock_gettime
	6e2: R_RISCV_RELAX	*ABS*
 6e6:	000080e7          	jalr	ra # 6e2 <nxmutex_timedlock+0x10>
 6ea:	3e800693          	li	a3,1000
 6ee:	02d456bb          	divuw	a3,s0,a3
 6f2:	c1800793          	li	a5,-1000
 6f6:	4702                	lw	a4,0(sp)
 6f8:	02d787bb          	mulw	a5,a5,a3
 6fc:	00e6863b          	addw	a2,a3,a4
 700:	000f46b7          	lui	a3,0xf4
 704:	24068693          	add	a3,a3,576 # f4240 <_edata+0xf32b4>
 708:	9fa1                	addw	a5,a5,s0
 70a:	1782                	sll	a5,a5,0x20
 70c:	9381                	srl	a5,a5,0x20
 70e:	02d787b3          	mul	a5,a5,a3
 712:	66a2                	ld	a3,8(sp)
 714:	97b6                	add	a5,a5,a3
 716:	3b9ad6b7          	lui	a3,0x3b9ad
 71a:	9ff68693          	add	a3,a3,-1537 # 3b9ac9ff <_edata+0x3b9aba73>
 71e:	00f6d863          	bge	a3,a5,72e <.L35>	71e: R_RISCV_BRANCH	.L35
 722:	c46536b7          	lui	a3,0xc4653
 726:	60068693          	add	a3,a3,1536 # ffffffffc4653600 <_edata+0xffffffffc4652674>
 72a:	97b6                	add	a5,a5,a3
 72c:	2605                	addw	a2,a2,1 # 619 <.L21+0x1>

000000000000072e <.L35>:
 72e:	c832                	sw	a2,16(sp)
 730:	8526                	mv	a0,s1
 732:	0810                	add	a2,sp,16
 734:	4585                	li	a1,1
 736:	ec3e                	sd	a5,24(sp)
 738:	00000097          	auipc	ra,0x0	738: R_RISCV_CALL_PLT	nxmutex_clocklock
	738: R_RISCV_RELAX	*ABS*
 73c:	000080e7          	jalr	ra # 738 <.L35+0xa>
 740:	70e2                	ld	ra,56(sp)
 742:	7442                	ld	s0,48(sp)
 744:	74a2                	ld	s1,40(sp)
 746:	6121                	add	sp,sp,64
 748:	8082                	ret

000000000000074a <nxmutex_unlock>:
nxmutex_unlock():
 74a:	1101                	add	sp,sp,-32
 74c:	ec06                	sd	ra,24(sp)
 74e:	e822                	sd	s0,16(sp)
 750:	e426                	sd	s1,8(sp)
 752:	4d18                	lw	a4,24(a0)
 754:	57f9                	li	a5,-2
 756:	04f70b63          	beq	a4,a5,7ac <.L42>	756: R_RISCV_BRANCH	.L42
 75a:	842a                	mv	s0,a0
 75c:	00000097          	auipc	ra,0x0	75c: R_RISCV_CALL_PLT	nxmutex_is_hold
	75c: R_RISCV_RELAX	*ABS*
 760:	000080e7          	jalr	ra # 75c <nxmutex_unlock+0x12>
 764:	ed19                	bnez	a0,782 <.L39>	764: R_RISCV_RVC_BRANCH	.L39
 766:	00000617          	auipc	a2,0x0	766: R_RISCV_PCREL_HI20	.LC2
	766: R_RISCV_RELAX	*ABS*
 76a:	00060613          	mv	a2,a2	76a: R_RISCV_PCREL_LO12_I	.L0 
	76a: R_RISCV_RELAX	*ABS*
 76e:	1b000593          	li	a1,432
 772:	00000517          	auipc	a0,0x0	772: R_RISCV_PCREL_HI20	.LC1
	772: R_RISCV_RELAX	*ABS*
 776:	00050513          	mv	a0,a0	776: R_RISCV_PCREL_LO12_I	.L0 
	776: R_RISCV_RELAX	*ABS*
 77a:	00000097          	auipc	ra,0x0	77a: R_RISCV_CALL_PLT	__assert
	77a: R_RISCV_RELAX	*ABS*
 77e:	000080e7          	jalr	ra # 77a <nxmutex_unlock+0x30>

0000000000000782 <.L39>:
 782:	57fd                	li	a5,-1
 784:	cc1c                	sw	a5,24(s0)
 786:	8522                	mv	a0,s0
 788:	00000097          	auipc	ra,0x0	788: R_RISCV_CALL_PLT	nxsem_post
	788: R_RISCV_RELAX	*ABS*
 78c:	000080e7          	jalr	ra # 788 <.L39+0x6>
 790:	84aa                	mv	s1,a0
 792:	00055763          	bgez	a0,7a0 <.L38>	792: R_RISCV_BRANCH	.L38
 796:	00000097          	auipc	ra,0x0	796: R_RISCV_CALL_PLT	gettid
	796: R_RISCV_RELAX	*ABS*
 79a:	000080e7          	jalr	ra # 796 <.L39+0x14>
 79e:	cc08                	sw	a0,24(s0)

00000000000007a0 <.L38>:
 7a0:	60e2                	ld	ra,24(sp)
 7a2:	6442                	ld	s0,16(sp)
 7a4:	8526                	mv	a0,s1
 7a6:	64a2                	ld	s1,8(sp)
 7a8:	6105                	add	sp,sp,32
 7aa:	8082                	ret

00000000000007ac <.L42>:
 7ac:	4481                	li	s1,0
 7ae:	bfcd                	j	7a0 <.L38>	7ae: R_RISCV_RVC_JUMP	.L38

00000000000007b0 <nxmutex_breaklock>:
nxmutex_breaklock():
 7b0:	1101                	add	sp,sp,-32
 7b2:	0005a023          	sw	zero,0(a1)
 7b6:	e822                	sd	s0,16(sp)
 7b8:	e426                	sd	s1,8(sp)
 7ba:	ec06                	sd	ra,24(sp)
 7bc:	84aa                	mv	s1,a0
 7be:	842e                	mv	s0,a1
 7c0:	00000097          	auipc	ra,0x0	7c0: R_RISCV_CALL_PLT	nxmutex_is_hold
	7c0: R_RISCV_RELAX	*ABS*
 7c4:	000080e7          	jalr	ra # 7c0 <nxmutex_breaklock+0x10>
 7c8:	cd19                	beqz	a0,7e6 <.L47>	7c8: R_RISCV_RVC_BRANCH	.L47
 7ca:	8526                	mv	a0,s1
 7cc:	00000097          	auipc	ra,0x0	7cc: R_RISCV_CALL_PLT	nxmutex_unlock
	7cc: R_RISCV_RELAX	*ABS*
 7d0:	000080e7          	jalr	ra # 7cc <nxmutex_breaklock+0x1c>
 7d4:	00054463          	bltz	a0,7dc <.L45>	7d4: R_RISCV_BRANCH	.L45
 7d8:	4785                	li	a5,1
 7da:	c01c                	sw	a5,0(s0)

00000000000007dc <.L45>:
 7dc:	60e2                	ld	ra,24(sp)
 7de:	6442                	ld	s0,16(sp)
 7e0:	64a2                	ld	s1,8(sp)
 7e2:	6105                	add	sp,sp,32
 7e4:	8082                	ret

00000000000007e6 <.L47>:
 7e6:	4501                	li	a0,0
 7e8:	bfd5                	j	7dc <.L45>	7e8: R_RISCV_RVC_JUMP	.L45

00000000000007ea <nxmutex_restorelock>:
nxmutex_restorelock():
 7ea:	c589                	beqz	a1,7f4 <.L50>	7ea: R_RISCV_RVC_BRANCH	.L50
 7ec:	00000317          	auipc	t1,0x0	7ec: R_RISCV_CALL_PLT	nxmutex_lock
	7ec: R_RISCV_RELAX	*ABS*
 7f0:	00030067          	jr	t1 # 7ec <nxmutex_restorelock+0x2>

00000000000007f4 <.L50>:
 7f4:	4501                	li	a0,0
 7f6:	8082                	ret

00000000000007f8 <nxmutex_set_protocol>:
nxmutex_set_protocol():
 7f8:	00000317          	auipc	t1,0x0	7f8: R_RISCV_CALL_PLT	nxsem_set_protocol
	7f8: R_RISCV_RELAX	*ABS*
 7fc:	00030067          	jr	t1 # 7f8 <nxmutex_set_protocol>

0000000000000800 <nxrmutex_init>:
nxrmutex_init():
 800:	02052023          	sw	zero,32(a0) # 792 <.L39+0x10>
 804:	00000317          	auipc	t1,0x0	804: R_RISCV_CALL_PLT	nxmutex_init
	804: R_RISCV_RELAX	*ABS*
 808:	00030067          	jr	t1 # 804 <nxrmutex_init+0x4>

000000000000080c <nxrmutex_destroy>:
nxrmutex_destroy():
 80c:	1141                	add	sp,sp,-16
 80e:	e022                	sd	s0,0(sp)
 810:	e406                	sd	ra,8(sp)
 812:	842a                	mv	s0,a0
 814:	00000097          	auipc	ra,0x0	814: R_RISCV_CALL_PLT	nxmutex_destroy
	814: R_RISCV_RELAX	*ABS*
 818:	000080e7          	jalr	ra # 814 <nxrmutex_destroy+0x8>
 81c:	00054463          	bltz	a0,824 <.L54>	81c: R_RISCV_BRANCH	.L54
 820:	02042023          	sw	zero,32(s0)

0000000000000824 <.L54>:
 824:	60a2                	ld	ra,8(sp)
 826:	6402                	ld	s0,0(sp)
 828:	0141                	add	sp,sp,16
 82a:	8082                	ret

000000000000082c <nxrmutex_is_hold>:
nxrmutex_is_hold():
 82c:	00000317          	auipc	t1,0x0	82c: R_RISCV_CALL_PLT	nxmutex_is_hold
	82c: R_RISCV_RELAX	*ABS*
 830:	00030067          	jr	t1 # 82c <nxrmutex_is_hold>

0000000000000834 <nxrmutex_is_recursive>:
nxrmutex_is_recursive():
 834:	5108                	lw	a0,32(a0)
 836:	4785                	li	a5,1
 838:	00a7b533          	sltu	a0,a5,a0
 83c:	8082                	ret

000000000000083e <nxrmutex_get_holder>:
nxrmutex_get_holder():
 83e:	4d08                	lw	a0,24(a0)
 840:	8082                	ret

0000000000000842 <nxrmutex_is_locked>:
nxrmutex_is_locked():
 842:	00000317          	auipc	t1,0x0	842: R_RISCV_CALL_PLT	nxmutex_is_locked
	842: R_RISCV_RELAX	*ABS*
 846:	00030067          	jr	t1 # 842 <nxrmutex_is_locked>

000000000000084a <nxrmutex_lock>:
nxrmutex_lock():
 84a:	1141                	add	sp,sp,-16
 84c:	e022                	sd	s0,0(sp)
 84e:	e406                	sd	ra,8(sp)
 850:	842a                	mv	s0,a0
 852:	00000097          	auipc	ra,0x0	852: R_RISCV_CALL_PLT	nxmutex_is_hold
	852: R_RISCV_RELAX	*ABS*
 856:	000080e7          	jalr	ra # 852 <nxrmutex_lock+0x8>
 85a:	87aa                	mv	a5,a0
 85c:	4501                	li	a0,0
 85e:	eb81                	bnez	a5,86e <.L61>	85e: R_RISCV_RVC_BRANCH	.L61
 860:	8522                	mv	a0,s0
 862:	00000097          	auipc	ra,0x0	862: R_RISCV_CALL_PLT	nxmutex_lock
	862: R_RISCV_RELAX	*ABS*
 866:	000080e7          	jalr	ra # 862 <nxrmutex_lock+0x18>
 86a:	02054663          	bltz	a0,896 <.L62>	86a: R_RISCV_BRANCH	.L62

000000000000086e <.L61>:
 86e:	501c                	lw	a5,32(s0)
 870:	577d                	li	a4,-1
 872:	02e79063          	bne	a5,a4,892 <.L63>	872: R_RISCV_BRANCH	.L63
 876:	00000617          	auipc	a2,0x0	876: R_RISCV_PCREL_HI20	.LC3
	876: R_RISCV_RELAX	*ABS*
 87a:	00060613          	mv	a2,a2	87a: R_RISCV_PCREL_LO12_I	.L0 
	87a: R_RISCV_RELAX	*ABS*
 87e:	2f900593          	li	a1,761
 882:	00000517          	auipc	a0,0x0	882: R_RISCV_PCREL_HI20	.LC1
	882: R_RISCV_RELAX	*ABS*
 886:	00050513          	mv	a0,a0	886: R_RISCV_PCREL_LO12_I	.L0 
	886: R_RISCV_RELAX	*ABS*
 88a:	00000097          	auipc	ra,0x0	88a: R_RISCV_CALL_PLT	__assert
	88a: R_RISCV_RELAX	*ABS*
 88e:	000080e7          	jalr	ra # 88a <.L61+0x1c>

0000000000000892 <.L63>:
 892:	2785                	addw	a5,a5,1
 894:	d01c                	sw	a5,32(s0)

0000000000000896 <.L62>:
 896:	60a2                	ld	ra,8(sp)
 898:	6402                	ld	s0,0(sp)
 89a:	0141                	add	sp,sp,16
 89c:	8082                	ret

000000000000089e <nxrmutex_trylock>:
nxrmutex_trylock():
 89e:	1141                	add	sp,sp,-16
 8a0:	e022                	sd	s0,0(sp)
 8a2:	e406                	sd	ra,8(sp)
 8a4:	842a                	mv	s0,a0
 8a6:	00000097          	auipc	ra,0x0	8a6: R_RISCV_CALL_PLT	nxmutex_is_hold
	8a6: R_RISCV_RELAX	*ABS*
 8aa:	000080e7          	jalr	ra # 8a6 <nxrmutex_trylock+0x8>
 8ae:	87aa                	mv	a5,a0
 8b0:	4501                	li	a0,0
 8b2:	eb81                	bnez	a5,8c2 <.L68>	8b2: R_RISCV_RVC_BRANCH	.L68
 8b4:	8522                	mv	a0,s0
 8b6:	00000097          	auipc	ra,0x0	8b6: R_RISCV_CALL_PLT	nxmutex_trylock
	8b6: R_RISCV_RELAX	*ABS*
 8ba:	000080e7          	jalr	ra # 8b6 <nxrmutex_trylock+0x18>
 8be:	02054663          	bltz	a0,8ea <.L69>	8be: R_RISCV_BRANCH	.L69

00000000000008c2 <.L68>:
 8c2:	501c                	lw	a5,32(s0)
 8c4:	577d                	li	a4,-1
 8c6:	02e79063          	bne	a5,a4,8e6 <.L70>	8c6: R_RISCV_BRANCH	.L70
 8ca:	00000617          	auipc	a2,0x0	8ca: R_RISCV_PCREL_HI20	.LC3
	8ca: R_RISCV_RELAX	*ABS*
 8ce:	00060613          	mv	a2,a2	8ce: R_RISCV_PCREL_LO12_I	.L0 
	8ce: R_RISCV_RELAX	*ABS*
 8d2:	32200593          	li	a1,802
 8d6:	00000517          	auipc	a0,0x0	8d6: R_RISCV_PCREL_HI20	.LC1
	8d6: R_RISCV_RELAX	*ABS*
 8da:	00050513          	mv	a0,a0	8da: R_RISCV_PCREL_LO12_I	.L0 
	8da: R_RISCV_RELAX	*ABS*
 8de:	00000097          	auipc	ra,0x0	8de: R_RISCV_CALL_PLT	__assert
	8de: R_RISCV_RELAX	*ABS*
 8e2:	000080e7          	jalr	ra # 8de <.L68+0x1c>

00000000000008e6 <.L70>:
 8e6:	2785                	addw	a5,a5,1
 8e8:	d01c                	sw	a5,32(s0)

00000000000008ea <.L69>:
 8ea:	60a2                	ld	ra,8(sp)
 8ec:	6402                	ld	s0,0(sp)
 8ee:	0141                	add	sp,sp,16
 8f0:	8082                	ret

00000000000008f2 <nxrmutex_clocklock>:
nxrmutex_clocklock():
 8f2:	1101                	add	sp,sp,-32
 8f4:	e822                	sd	s0,16(sp)
 8f6:	e42e                	sd	a1,8(sp)
 8f8:	e032                	sd	a2,0(sp)
 8fa:	ec06                	sd	ra,24(sp)
 8fc:	842a                	mv	s0,a0
 8fe:	00000097          	auipc	ra,0x0	8fe: R_RISCV_CALL_PLT	nxmutex_is_hold
	8fe: R_RISCV_RELAX	*ABS*
 902:	000080e7          	jalr	ra # 8fe <nxrmutex_clocklock+0xc>
 906:	87aa                	mv	a5,a0
 908:	6602                	ld	a2,0(sp)
 90a:	65a2                	ld	a1,8(sp)
 90c:	4501                	li	a0,0
 90e:	eb81                	bnez	a5,91e <.L75>	90e: R_RISCV_RVC_BRANCH	.L75
 910:	8522                	mv	a0,s0
 912:	00000097          	auipc	ra,0x0	912: R_RISCV_CALL_PLT	nxmutex_clocklock
	912: R_RISCV_RELAX	*ABS*
 916:	000080e7          	jalr	ra # 912 <nxrmutex_clocklock+0x20>
 91a:	02054663          	bltz	a0,946 <.L76>	91a: R_RISCV_BRANCH	.L76

000000000000091e <.L75>:
 91e:	501c                	lw	a5,32(s0)
 920:	577d                	li	a4,-1
 922:	02e79063          	bne	a5,a4,942 <.L77>	922: R_RISCV_BRANCH	.L77
 926:	00000617          	auipc	a2,0x0	926: R_RISCV_PCREL_HI20	.LC3
	926: R_RISCV_RELAX	*ABS*
 92a:	00060613          	mv	a2,a2	92a: R_RISCV_PCREL_LO12_I	.L0 
	92a: R_RISCV_RELAX	*ABS*
 92e:	34e00593          	li	a1,846
 932:	00000517          	auipc	a0,0x0	932: R_RISCV_PCREL_HI20	.LC1
	932: R_RISCV_RELAX	*ABS*
 936:	00050513          	mv	a0,a0	936: R_RISCV_PCREL_LO12_I	.L0 
	936: R_RISCV_RELAX	*ABS*
 93a:	00000097          	auipc	ra,0x0	93a: R_RISCV_CALL_PLT	__assert
	93a: R_RISCV_RELAX	*ABS*
 93e:	000080e7          	jalr	ra # 93a <.L75+0x1c>

0000000000000942 <.L77>:
 942:	2785                	addw	a5,a5,1
 944:	d01c                	sw	a5,32(s0)

0000000000000946 <.L76>:
 946:	60e2                	ld	ra,24(sp)
 948:	6442                	ld	s0,16(sp)
 94a:	6105                	add	sp,sp,32
 94c:	8082                	ret

000000000000094e <nxrmutex_timedlock>:
nxrmutex_timedlock():
 94e:	1101                	add	sp,sp,-32
 950:	e822                	sd	s0,16(sp)
 952:	e42e                	sd	a1,8(sp)
 954:	ec06                	sd	ra,24(sp)
 956:	842a                	mv	s0,a0
 958:	00000097          	auipc	ra,0x0	958: R_RISCV_CALL_PLT	nxmutex_is_hold
	958: R_RISCV_RELAX	*ABS*
 95c:	000080e7          	jalr	ra # 958 <nxrmutex_timedlock+0xa>
 960:	87aa                	mv	a5,a0
 962:	65a2                	ld	a1,8(sp)
 964:	4501                	li	a0,0
 966:	eb81                	bnez	a5,976 <.L82>	966: R_RISCV_RVC_BRANCH	.L82
 968:	8522                	mv	a0,s0
 96a:	00000097          	auipc	ra,0x0	96a: R_RISCV_CALL_PLT	nxmutex_timedlock
	96a: R_RISCV_RELAX	*ABS*
 96e:	000080e7          	jalr	ra # 96a <nxrmutex_timedlock+0x1c>
 972:	02054663          	bltz	a0,99e <.L83>	972: R_RISCV_BRANCH	.L83

0000000000000976 <.L82>:
 976:	501c                	lw	a5,32(s0)
 978:	577d                	li	a4,-1
 97a:	02e79063          	bne	a5,a4,99a <.L84>	97a: R_RISCV_BRANCH	.L84
 97e:	00000617          	auipc	a2,0x0	97e: R_RISCV_PCREL_HI20	.LC3
	97e: R_RISCV_RELAX	*ABS*
 982:	00060613          	mv	a2,a2	982: R_RISCV_PCREL_LO12_I	.L0 
	982: R_RISCV_RELAX	*ABS*
 986:	37900593          	li	a1,889
 98a:	00000517          	auipc	a0,0x0	98a: R_RISCV_PCREL_HI20	.LC1
	98a: R_RISCV_RELAX	*ABS*
 98e:	00050513          	mv	a0,a0	98e: R_RISCV_PCREL_LO12_I	.L0 
	98e: R_RISCV_RELAX	*ABS*
 992:	00000097          	auipc	ra,0x0	992: R_RISCV_CALL_PLT	__assert
	992: R_RISCV_RELAX	*ABS*
 996:	000080e7          	jalr	ra # 992 <.L82+0x1c>

000000000000099a <.L84>:
 99a:	2785                	addw	a5,a5,1
 99c:	d01c                	sw	a5,32(s0)

000000000000099e <.L83>:
 99e:	60e2                	ld	ra,24(sp)
 9a0:	6442                	ld	s0,16(sp)
 9a2:	6105                	add	sp,sp,32
 9a4:	8082                	ret

00000000000009a6 <nxrmutex_unlock>:
nxrmutex_unlock():
 9a6:	1141                	add	sp,sp,-16
 9a8:	e406                	sd	ra,8(sp)
 9aa:	e022                	sd	s0,0(sp)
 9ac:	511c                	lw	a5,32(a0)
 9ae:	ef99                	bnez	a5,9cc <.L89>	9ae: R_RISCV_RVC_BRANCH	.L89
 9b0:	00000617          	auipc	a2,0x0	9b0: R_RISCV_PCREL_HI20	.LC4
	9b0: R_RISCV_RELAX	*ABS*
 9b4:	00060613          	mv	a2,a2	9b4: R_RISCV_PCREL_LO12_I	.L0 
	9b4: R_RISCV_RELAX	*ABS*
 9b8:	39900593          	li	a1,921
 9bc:	00000517          	auipc	a0,0x0	9bc: R_RISCV_PCREL_HI20	.LC1
	9bc: R_RISCV_RELAX	*ABS*
 9c0:	00050513          	mv	a0,a0	9c0: R_RISCV_PCREL_LO12_I	.L0 
	9c0: R_RISCV_RELAX	*ABS*
 9c4:	00000097          	auipc	ra,0x0	9c4: R_RISCV_CALL_PLT	__assert
	9c4: R_RISCV_RELAX	*ABS*
 9c8:	000080e7          	jalr	ra # 9c4 <nxrmutex_unlock+0x1e>

00000000000009cc <.L89>:
 9cc:	fff7871b          	addw	a4,a5,-1
 9d0:	d118                	sw	a4,32(a0)
 9d2:	842a                	mv	s0,a0
 9d4:	4781                	li	a5,0
 9d6:	eb19                	bnez	a4,9ec <.L90>	9d6: R_RISCV_RVC_BRANCH	.L90
 9d8:	00000097          	auipc	ra,0x0	9d8: R_RISCV_CALL_PLT	nxmutex_unlock
	9d8: R_RISCV_RELAX	*ABS*
 9dc:	000080e7          	jalr	ra # 9d8 <.L89+0xc>
 9e0:	87aa                	mv	a5,a0
 9e2:	00055563          	bgez	a0,9ec <.L90>	9e2: R_RISCV_BRANCH	.L90
 9e6:	5018                	lw	a4,32(s0)
 9e8:	2705                	addw	a4,a4,1 # ffffffffffffe001 <_edata+0xffffffffffffd075>
 9ea:	d018                	sw	a4,32(s0)

00000000000009ec <.L90>:
 9ec:	60a2                	ld	ra,8(sp)
 9ee:	6402                	ld	s0,0(sp)
 9f0:	853e                	mv	a0,a5
 9f2:	0141                	add	sp,sp,16
 9f4:	8082                	ret

00000000000009f6 <nxrmutex_breaklock>:
nxrmutex_breaklock():
 9f6:	1101                	add	sp,sp,-32
 9f8:	0005a023          	sw	zero,0(a1)
 9fc:	e822                	sd	s0,16(sp)
 9fe:	e426                	sd	s1,8(sp)
 a00:	ec06                	sd	ra,24(sp)
 a02:	842a                	mv	s0,a0
 a04:	84ae                	mv	s1,a1
 a06:	00000097          	auipc	ra,0x0	a06: R_RISCV_CALL_PLT	nxmutex_is_hold
	a06: R_RISCV_RELAX	*ABS*
 a0a:	000080e7          	jalr	ra # a06 <nxrmutex_breaklock+0x10>
 a0e:	c11d                	beqz	a0,a34 <.L97>	a0e: R_RISCV_RVC_BRANCH	.L97
 a10:	501c                	lw	a5,32(s0)
 a12:	8522                	mv	a0,s0
 a14:	c09c                	sw	a5,0(s1)
 a16:	02042023          	sw	zero,32(s0)
 a1a:	00000097          	auipc	ra,0x0	a1a: R_RISCV_CALL_PLT	nxmutex_unlock
	a1a: R_RISCV_RELAX	*ABS*
 a1e:	000080e7          	jalr	ra # a1a <nxrmutex_breaklock+0x24>
 a22:	00055463          	bgez	a0,a2a <.L95>	a22: R_RISCV_BRANCH	.L95
 a26:	409c                	lw	a5,0(s1)
 a28:	d01c                	sw	a5,32(s0)

0000000000000a2a <.L95>:
 a2a:	60e2                	ld	ra,24(sp)
 a2c:	6442                	ld	s0,16(sp)
 a2e:	64a2                	ld	s1,8(sp)
 a30:	6105                	add	sp,sp,32
 a32:	8082                	ret

0000000000000a34 <.L97>:
 a34:	4501                	li	a0,0
 a36:	bfd5                	j	a2a <.L95>	a36: R_RISCV_RVC_JUMP	.L95

0000000000000a38 <nxrmutex_restorelock>:
nxrmutex_restorelock():
 a38:	c19d                	beqz	a1,a5e <.L102>	a38: R_RISCV_RVC_BRANCH	.L102
 a3a:	1101                	add	sp,sp,-32
 a3c:	e822                	sd	s0,16(sp)
 a3e:	e426                	sd	s1,8(sp)
 a40:	ec06                	sd	ra,24(sp)
 a42:	84aa                	mv	s1,a0
 a44:	842e                	mv	s0,a1
 a46:	00000097          	auipc	ra,0x0	a46: R_RISCV_CALL_PLT	nxmutex_lock
	a46: R_RISCV_RELAX	*ABS*
 a4a:	000080e7          	jalr	ra # a46 <nxrmutex_restorelock+0xe>
 a4e:	00054363          	bltz	a0,a54 <.L100>	a4e: R_RISCV_BRANCH	.L100
 a52:	d080                	sw	s0,32(s1)

0000000000000a54 <.L100>:
 a54:	60e2                	ld	ra,24(sp)
 a56:	6442                	ld	s0,16(sp)
 a58:	64a2                	ld	s1,8(sp)
 a5a:	6105                	add	sp,sp,32
 a5c:	8082                	ret

0000000000000a5e <.L102>:
 a5e:	4501                	li	a0,0
 a60:	8082                	ret

0000000000000a62 <task_setcancelstate>:
task_setcancelstate():
 a62:	1141                	add	sp,sp,-16
 a64:	7779                	lui	a4,0xffffe
 a66:	e406                	sd	ra,8(sp)
 a68:	878a                	mv	a5,sp
 a6a:	8ff9                	and	a5,a5,a4
 a6c:	c599                	beqz	a1,a7a <.L2>	a6c: R_RISCV_RVC_BRANCH	.L2
 a6e:	0087c703          	lbu	a4,8(a5)
 a72:	8b05                	and	a4,a4,1
 a74:	c70d                	beqz	a4,a9e <.L3>	a74: R_RISCV_RVC_BRANCH	.L3
 a76:	4705                	li	a4,1
 a78:	c198                	sw	a4,0(a1)

0000000000000a7a <.L2>:
 a7a:	e50d                	bnez	a0,aa4 <.L4>	a7a: R_RISCV_RVC_BRANCH	.L4
 a7c:	0087c703          	lbu	a4,8(a5)
 a80:	ffe77693          	and	a3,a4,-2
 a84:	00d78423          	sb	a3,8(a5)
 a88:	00477693          	and	a3,a4,4
 a8c:	c68d                	beqz	a3,ab6 <.L5>	a8c: R_RISCV_RVC_BRANCH	.L5
 a8e:	9b69                	and	a4,a4,-6
 a90:	00e78423          	sb	a4,8(a5)
 a94:	557d                	li	a0,-1
 a96:	00000097          	auipc	ra,0x0	a96: R_RISCV_CALL_PLT	pthread_exit
	a96: R_RISCV_RELAX	*ABS*
 a9a:	000080e7          	jalr	ra # a96 <.L2+0x1c>

0000000000000a9e <.L3>:
 a9e:	0005a023          	sw	zero,0(a1)
 aa2:	bfe1                	j	a7a <.L2>	aa2: R_RISCV_RVC_JUMP	.L2

0000000000000aa4 <.L4>:
 aa4:	4705                	li	a4,1
 aa6:	00e51c63          	bne	a0,a4,abe <.L6>	aa6: R_RISCV_BRANCH	.L6
 aaa:	0087c703          	lbu	a4,8(a5)
 aae:	00176713          	or	a4,a4,1
 ab2:	00e78423          	sb	a4,8(a5)

0000000000000ab6 <.L5>:
 ab6:	4501                	li	a0,0

0000000000000ab8 <.L7>:
 ab8:	60a2                	ld	ra,8(sp)
 aba:	0141                	add	sp,sp,16
 abc:	8082                	ret

0000000000000abe <.L6>:
 abe:	00000097          	auipc	ra,0x0	abe: R_RISCV_CALL_PLT	__errno
	abe: R_RISCV_RELAX	*ABS*
 ac2:	000080e7          	jalr	ra # abe <.L6>
 ac6:	47d9                	li	a5,22
 ac8:	c11c                	sw	a5,0(a0)
 aca:	557d                	li	a0,-1
 acc:	b7f5                	j	ab8 <.L7>	acc: R_RISCV_RVC_JUMP	.L7

0000000000000ace <nxsem_init>:
nxsem_init():
 ace:	c509                	beqz	a0,ad8 <.L2>	ace: R_RISCV_RVC_BRANCH	.L2
 ad0:	0006079b          	sext.w	a5,a2
 ad4:	02065263          	bgez	a2,af8 <.L3>	ad4: R_RISCV_BRANCH	.L3

0000000000000ad8 <.L2>:
 ad8:	1141                	add	sp,sp,-16
 ada:	00000617          	auipc	a2,0x0	ada: R_RISCV_PCREL_HI20	.LC0
	ada: R_RISCV_RELAX	*ABS*
 ade:	00060613          	mv	a2,a2	ade: R_RISCV_PCREL_LO12_I	.L0 
	ade: R_RISCV_RELAX	*ABS*
 ae2:	04500593          	li	a1,69
 ae6:	00000517          	auipc	a0,0x0	ae6: R_RISCV_PCREL_HI20	.LC1
	ae6: R_RISCV_RELAX	*ABS*
 aea:	00050513          	mv	a0,a0	aea: R_RISCV_PCREL_LO12_I	.L0 
	aea: R_RISCV_RELAX	*ABS*
 aee:	e406                	sd	ra,8(sp)
 af0:	00000097          	auipc	ra,0x0	af0: R_RISCV_CALL_PLT	__assert
	af0: R_RISCV_RELAX	*ABS*
 af4:	000080e7          	jalr	ra # af0 <.L2+0x18>

0000000000000af8 <.L3>:
 af8:	c11c                	sw	a5,0(a0)
 afa:	00053423          	sd	zero,8(a0) # aee <.L2+0x16>
 afe:	00053823          	sd	zero,16(a0)
 b02:	00050223          	sb	zero,4(a0)
 b06:	4501                	li	a0,0
 b08:	8082                	ret

0000000000000b0a <sem_init>:
sem_init():
 b0a:	1141                	add	sp,sp,-16
 b0c:	e406                	sd	ra,8(sp)
 b0e:	e022                	sd	s0,0(sp)
 b10:	c119                	beqz	a0,b16 <.L10>	b10: R_RISCV_RVC_BRANCH	.L10
 b12:	00065d63          	bgez	a2,b2c <.L11>	b12: R_RISCV_BRANCH	.L11

0000000000000b16 <.L10>:
 b16:	00000097          	auipc	ra,0x0	b16: R_RISCV_CALL_PLT	__errno
	b16: R_RISCV_RELAX	*ABS*
 b1a:	000080e7          	jalr	ra # b16 <.L10>
 b1e:	47d9                	li	a5,22
 b20:	c11c                	sw	a5,0(a0)

0000000000000b22 <.L12>:
 b22:	557d                	li	a0,-1

0000000000000b24 <.L13>:
 b24:	60a2                	ld	ra,8(sp)
 b26:	6402                	ld	s0,0(sp)
 b28:	0141                	add	sp,sp,16
 b2a:	8082                	ret

0000000000000b2c <.L11>:
 b2c:	00000097          	auipc	ra,0x0	b2c: R_RISCV_CALL_PLT	nxsem_init
	b2c: R_RISCV_RELAX	*ABS*
 b30:	000080e7          	jalr	ra # b2c <.L11>
 b34:	842a                	mv	s0,a0
 b36:	fe0557e3          	bgez	a0,b24 <.L13>	b36: R_RISCV_BRANCH	.L13
 b3a:	00000097          	auipc	ra,0x0	b3a: R_RISCV_CALL_PLT	__errno
	b3a: R_RISCV_RELAX	*ABS*
 b3e:	000080e7          	jalr	ra # b3a <.L11+0xe>
 b42:	4080043b          	negw	s0,s0
 b46:	c100                	sw	s0,0(a0)
 b48:	bfe9                	j	b22 <.L12>	b48: R_RISCV_RVC_JUMP	.L12

0000000000000b4a <nxsem_set_protocol>:
nxsem_set_protocol():
 b4a:	e10d                	bnez	a0,b6c <.L2>	b4a: R_RISCV_RVC_BRANCH	.L2
 b4c:	1141                	add	sp,sp,-16
 b4e:	00000617          	auipc	a2,0x0	b4e: R_RISCV_PCREL_HI20	.LC0
	b4e: R_RISCV_RELAX	*ABS*
 b52:	00060613          	mv	a2,a2	b52: R_RISCV_PCREL_LO12_I	.L0 
	b52: R_RISCV_RELAX	*ABS*
 b56:	05000593          	li	a1,80
 b5a:	00000517          	auipc	a0,0x0	b5a: R_RISCV_PCREL_HI20	.LC1
	b5a: R_RISCV_RELAX	*ABS*
 b5e:	00050513          	mv	a0,a0	b5e: R_RISCV_PCREL_LO12_I	.L0 
	b5e: R_RISCV_RELAX	*ABS*
 b62:	e406                	sd	ra,8(sp)
 b64:	00000097          	auipc	ra,0x0	b64: R_RISCV_CALL_PLT	__assert
	b64: R_RISCV_RELAX	*ABS*
 b68:	000080e7          	jalr	ra # b64 <nxsem_set_protocol+0x1a>

0000000000000b6c <.L2>:
 b6c:	87aa                	mv	a5,a0
 b6e:	0035f513          	and	a0,a1,3
 b72:	c911                	beqz	a0,b86 <.L3>	b72: R_RISCV_RVC_BRANCH	.L3
 b74:	fff5071b          	addw	a4,a0,-1 # b59 <nxsem_set_protocol+0xf>
 b78:	4785                	li	a5,1
 b7a:	5529                	li	a0,-22
 b7c:	00e7e763          	bltu	a5,a4,b8a <.L4>	b7c: R_RISCV_BRANCH	.L4
 b80:	f7600513          	li	a0,-138
 b84:	8082                	ret

0000000000000b86 <.L3>:
 b86:	00b78223          	sb	a1,4(a5)

0000000000000b8a <.L4>:
 b8a:	8082                	ret

0000000000000b8c <sem_setprotocol>:
sem_setprotocol():
 b8c:	1141                	add	sp,sp,-16
 b8e:	e022                	sd	s0,0(sp)
 b90:	e406                	sd	ra,8(sp)
 b92:	00000097          	auipc	ra,0x0	b92: R_RISCV_CALL_PLT	nxsem_set_protocol
	b92: R_RISCV_RELAX	*ABS*
 b96:	000080e7          	jalr	ra # b92 <sem_setprotocol+0x6>
 b9a:	842a                	mv	s0,a0
 b9c:	00055a63          	bgez	a0,bb0 <.L10>	b9c: R_RISCV_BRANCH	.L10
 ba0:	4080043b          	negw	s0,s0
 ba4:	00000097          	auipc	ra,0x0	ba4: R_RISCV_CALL_PLT	__errno
	ba4: R_RISCV_RELAX	*ABS*
 ba8:	000080e7          	jalr	ra # ba4 <sem_setprotocol+0x18>
 bac:	c100                	sw	s0,0(a0)
 bae:	547d                	li	s0,-1

0000000000000bb0 <.L10>:
 bb0:	60a2                	ld	ra,8(sp)
 bb2:	8522                	mv	a0,s0
 bb4:	6402                	ld	s0,0(sp)
 bb6:	0141                	add	sp,sp,16
 bb8:	8082                	ret

0000000000000bba <nxsem_get_value>:
nxsem_get_value():
 bba:	87aa                	mv	a5,a0
 bbc:	5529                	li	a0,-22
 bbe:	c791                	beqz	a5,bca <.L2>	bbe: R_RISCV_RVC_BRANCH	.L2
 bc0:	c589                	beqz	a1,bca <.L2>	bc0: R_RISCV_RVC_BRANCH	.L2
 bc2:	439c                	lw	a5,0(a5)
 bc4:	4501                	li	a0,0
 bc6:	c19c                	sw	a5,0(a1)
 bc8:	8082                	ret

0000000000000bca <.L2>:
 bca:	8082                	ret

0000000000000bcc <sem_getvalue>:
sem_getvalue():
 bcc:	1141                	add	sp,sp,-16
 bce:	e022                	sd	s0,0(sp)
 bd0:	e406                	sd	ra,8(sp)
 bd2:	00000097          	auipc	ra,0x0	bd2: R_RISCV_CALL_PLT	nxsem_get_value
	bd2: R_RISCV_RELAX	*ABS*
 bd6:	000080e7          	jalr	ra # bd2 <sem_getvalue+0x6>
 bda:	842a                	mv	s0,a0
 bdc:	00055a63          	bgez	a0,bf0 <.L6>	bdc: R_RISCV_BRANCH	.L6
 be0:	4080043b          	negw	s0,s0
 be4:	00000097          	auipc	ra,0x0	be4: R_RISCV_CALL_PLT	__errno
	be4: R_RISCV_RELAX	*ABS*
 be8:	000080e7          	jalr	ra # be4 <sem_getvalue+0x18>
 bec:	c100                	sw	s0,0(a0)
 bee:	547d                	li	s0,-1

0000000000000bf0 <.L6>:
 bf0:	60a2                	ld	ra,8(sp)
 bf2:	8522                	mv	a0,s0
 bf4:	6402                	ld	s0,0(sp)
 bf6:	0141                	add	sp,sp,16
 bf8:	8082                	ret

0000000000000bfa <fflush_unlocked>:
fflush_unlocked():
 bfa:	1141                	add	sp,sp,-16
 bfc:	e406                	sd	ra,8(sp)
 bfe:	e022                	sd	s0,0(sp)
 c00:	e90d                	bnez	a0,c32 <.L2>	c00: R_RISCV_RVC_BRANCH	.L2
 c02:	00000097          	auipc	ra,0x0	c02: R_RISCV_CALL_PLT	lib_get_streams
	c02: R_RISCV_RELAX	*ABS*
 c06:	000080e7          	jalr	ra # c02 <fflush_unlocked+0x8>
 c0a:	00000097          	auipc	ra,0x0	c0a: R_RISCV_CALL_PLT	lib_flushall_unlocked
	c0a: R_RISCV_RELAX	*ABS*
 c0e:	000080e7          	jalr	ra # c0a <fflush_unlocked+0x10>
 c12:	842a                	mv	s0,a0

0000000000000c14 <.L3>:
 c14:	4501                	li	a0,0
 c16:	00045a63          	bgez	s0,c2a <.L4>	c16: R_RISCV_BRANCH	.L4
 c1a:	00000097          	auipc	ra,0x0	c1a: R_RISCV_CALL_PLT	__errno
	c1a: R_RISCV_RELAX	*ABS*
 c1e:	000080e7          	jalr	ra # c1a <.L3+0x6>
 c22:	4080043b          	negw	s0,s0
 c26:	c100                	sw	s0,0(a0)
 c28:	557d                	li	a0,-1

0000000000000c2a <.L4>:
 c2a:	60a2                	ld	ra,8(sp)
 c2c:	6402                	ld	s0,0(sp)
 c2e:	0141                	add	sp,sp,16
 c30:	8082                	ret

0000000000000c32 <.L2>:
 c32:	00000097          	auipc	ra,0x0	c32: R_RISCV_CALL_PLT	lib_fflush_unlocked
	c32: R_RISCV_RELAX	*ABS*
 c36:	000080e7          	jalr	ra # c32 <.L2>
 c3a:	0005041b          	sext.w	s0,a0
 c3e:	bfd9                	j	c14 <.L3>	c3e: R_RISCV_RVC_JUMP	.L3

0000000000000c40 <fflush>:
fflush():
 c40:	1141                	add	sp,sp,-16
 c42:	e406                	sd	ra,8(sp)
 c44:	e022                	sd	s0,0(sp)
 c46:	e90d                	bnez	a0,c78 <.L8>	c46: R_RISCV_RVC_BRANCH	.L8
 c48:	00000097          	auipc	ra,0x0	c48: R_RISCV_CALL_PLT	lib_get_streams
	c48: R_RISCV_RELAX	*ABS*
 c4c:	000080e7          	jalr	ra # c48 <fflush+0x8>
 c50:	00000097          	auipc	ra,0x0	c50: R_RISCV_CALL_PLT	lib_flushall
	c50: R_RISCV_RELAX	*ABS*
 c54:	000080e7          	jalr	ra # c50 <fflush+0x10>
 c58:	842a                	mv	s0,a0

0000000000000c5a <.L9>:
 c5a:	4501                	li	a0,0
 c5c:	00045a63          	bgez	s0,c70 <.L10>	c5c: R_RISCV_BRANCH	.L10
 c60:	00000097          	auipc	ra,0x0	c60: R_RISCV_CALL_PLT	__errno
	c60: R_RISCV_RELAX	*ABS*
 c64:	000080e7          	jalr	ra # c60 <.L9+0x6>
 c68:	4080043b          	negw	s0,s0
 c6c:	c100                	sw	s0,0(a0)
 c6e:	557d                	li	a0,-1

0000000000000c70 <.L10>:
 c70:	60a2                	ld	ra,8(sp)
 c72:	6402                	ld	s0,0(sp)
 c74:	0141                	add	sp,sp,16
 c76:	8082                	ret

0000000000000c78 <.L8>:
 c78:	00000097          	auipc	ra,0x0	c78: R_RISCV_CALL_PLT	lib_fflush
	c78: R_RISCV_RELAX	*ABS*
 c7c:	000080e7          	jalr	ra # c78 <.L8>
 c80:	0005041b          	sext.w	s0,a0
 c84:	bfd9                	j	c5a <.L9>	c84: R_RISCV_RVC_JUMP	.L9

0000000000000c86 <lib_flushall_unlocked>:
lib_flushall_unlocked():
 c86:	1101                	add	sp,sp,-32
 c88:	e426                	sd	s1,8(sp)
 c8a:	ec06                	sd	ra,24(sp)
 c8c:	e822                	sd	s0,16(sp)
 c8e:	4481                	li	s1,0
 c90:	c905                	beqz	a0,cc0 <.L2>	c90: R_RISCV_RVC_BRANCH	.L2
 c92:	842a                	mv	s0,a0
 c94:	02050513          	add	a0,a0,32
 c98:	00000097          	auipc	ra,0x0	c98: R_RISCV_CALL_PLT	lib_fflush_unlocked
	c98: R_RISCV_RELAX	*ABS*
 c9c:	000080e7          	jalr	ra # c98 <lib_flushall_unlocked+0x12>
 ca0:	0e040513          	add	a0,s0,224
 ca4:	00000097          	auipc	ra,0x0	ca4: R_RISCV_CALL_PLT	lib_fflush_unlocked
	ca4: R_RISCV_RELAX	*ABS*
 ca8:	000080e7          	jalr	ra # ca4 <lib_flushall_unlocked+0x1e>
 cac:	1a040513          	add	a0,s0,416
 cb0:	00000097          	auipc	ra,0x0	cb0: R_RISCV_CALL_PLT	lib_fflush_unlocked
	cb0: R_RISCV_RELAX	*ABS*
 cb4:	000080e7          	jalr	ra # cb0 <lib_flushall_unlocked+0x2a>
 cb8:	26043403          	ld	s0,608(s0)
 cbc:	4481                	li	s1,0

0000000000000cbe <.L3>:
 cbe:	e419                	bnez	s0,ccc <.L7>	cbe: R_RISCV_RVC_BRANCH	.L7

0000000000000cc0 <.L2>:
 cc0:	60e2                	ld	ra,24(sp)
 cc2:	6442                	ld	s0,16(sp)
 cc4:	8526                	mv	a0,s1
 cc6:	64a2                	ld	s1,8(sp)
 cc8:	6105                	add	sp,sp,32
 cca:	8082                	ret

0000000000000ccc <.L7>:
 ccc:	0b845783          	lhu	a5,184(s0)
 cd0:	8b89                	and	a5,a5,2
 cd2:	e789                	bnez	a5,cdc <.L4>	cd2: R_RISCV_RVC_BRANCH	.L4

0000000000000cd4 <.L6>:
 cd4:	8526                	mv	a0,s1

0000000000000cd6 <.L5>:
 cd6:	6000                	ld	s0,0(s0)
 cd8:	84aa                	mv	s1,a0
 cda:	b7d5                	j	cbe <.L3>	cda: R_RISCV_RVC_JUMP	.L3

0000000000000cdc <.L4>:
 cdc:	8522                	mv	a0,s0
 cde:	00000097          	auipc	ra,0x0	cde: R_RISCV_CALL_PLT	lib_fflush_unlocked
	cde: R_RISCV_RELAX	*ABS*
 ce2:	000080e7          	jalr	ra # cde <.L4+0x2>
 ce6:	2501                	sext.w	a0,a0
 ce8:	fe0556e3          	bgez	a0,cd4 <.L6>	ce8: R_RISCV_BRANCH	.L6
 cec:	b7ed                	j	cd6 <.L5>	cec: R_RISCV_RVC_JUMP	.L5

0000000000000cee <lib_flushall>:
lib_flushall():
 cee:	1101                	add	sp,sp,-32
 cf0:	e04a                	sd	s2,0(sp)
 cf2:	ec06                	sd	ra,24(sp)
 cf4:	e822                	sd	s0,16(sp)
 cf6:	e426                	sd	s1,8(sp)
 cf8:	4901                	li	s2,0
 cfa:	c129                	beqz	a0,d3c <.L11>	cfa: R_RISCV_RVC_BRANCH	.L11
 cfc:	842a                	mv	s0,a0
 cfe:	00000097          	auipc	ra,0x0	cfe: R_RISCV_CALL_PLT	nxmutex_lock
	cfe: R_RISCV_RELAX	*ABS*
 d02:	000080e7          	jalr	ra # cfe <lib_flushall+0x10>
 d06:	02040513          	add	a0,s0,32
 d0a:	00000097          	auipc	ra,0x0	d0a: R_RISCV_CALL_PLT	lib_fflush
	d0a: R_RISCV_RELAX	*ABS*
 d0e:	000080e7          	jalr	ra # d0a <lib_flushall+0x1c>
 d12:	0e040513          	add	a0,s0,224
 d16:	00000097          	auipc	ra,0x0	d16: R_RISCV_CALL_PLT	lib_fflush
	d16: R_RISCV_RELAX	*ABS*
 d1a:	000080e7          	jalr	ra # d16 <lib_flushall+0x28>
 d1e:	1a040513          	add	a0,s0,416
 d22:	00000097          	auipc	ra,0x0	d22: R_RISCV_CALL_PLT	lib_fflush
	d22: R_RISCV_RELAX	*ABS*
 d26:	000080e7          	jalr	ra # d22 <lib_flushall+0x34>
 d2a:	26043483          	ld	s1,608(s0)
 d2e:	4901                	li	s2,0

0000000000000d30 <.L12>:
 d30:	ec89                	bnez	s1,d4a <.L16>	d30: R_RISCV_RVC_BRANCH	.L16
 d32:	8522                	mv	a0,s0
 d34:	00000097          	auipc	ra,0x0	d34: R_RISCV_CALL_PLT	nxmutex_unlock
	d34: R_RISCV_RELAX	*ABS*
 d38:	000080e7          	jalr	ra # d34 <.L12+0x4>

0000000000000d3c <.L11>:
 d3c:	60e2                	ld	ra,24(sp)
 d3e:	6442                	ld	s0,16(sp)
 d40:	64a2                	ld	s1,8(sp)
 d42:	854a                	mv	a0,s2
 d44:	6902                	ld	s2,0(sp)
 d46:	6105                	add	sp,sp,32
 d48:	8082                	ret

0000000000000d4a <.L16>:
 d4a:	0b84d783          	lhu	a5,184(s1)
 d4e:	8b89                	and	a5,a5,2
 d50:	e789                	bnez	a5,d5a <.L13>	d50: R_RISCV_RVC_BRANCH	.L13

0000000000000d52 <.L15>:
 d52:	854a                	mv	a0,s2

0000000000000d54 <.L14>:
 d54:	6084                	ld	s1,0(s1)
 d56:	892a                	mv	s2,a0
 d58:	bfe1                	j	d30 <.L12>	d58: R_RISCV_RVC_JUMP	.L12

0000000000000d5a <.L13>:
 d5a:	8526                	mv	a0,s1
 d5c:	00000097          	auipc	ra,0x0	d5c: R_RISCV_CALL_PLT	lib_fflush
	d5c: R_RISCV_RELAX	*ABS*
 d60:	000080e7          	jalr	ra # d5c <.L13+0x2>
 d64:	2501                	sext.w	a0,a0
 d66:	fe0556e3          	bgez	a0,d52 <.L15>	d66: R_RISCV_BRANCH	.L15
 d6a:	b7ed                	j	d54 <.L14>	d6a: R_RISCV_RVC_JUMP	.L14

0000000000000d6c <__assert>:
__assert():
 d6c:	1141                	add	sp,sp,-16
 d6e:	4681                	li	a3,0
 d70:	e406                	sd	ra,8(sp)
 d72:	00000097          	auipc	ra,0x0	d72: R_RISCV_CALL_PLT	_assert
	d72: R_RISCV_RELAX	*ABS*
 d76:	000080e7          	jalr	ra # d72 <__assert+0x6>
 d7a:	00000097          	auipc	ra,0x0	d7a: R_RISCV_CALL_PLT	abort
	d7a: R_RISCV_RELAX	*ABS*
 d7e:	000080e7          	jalr	ra # d7a <__assert+0xe>

0000000000000d82 <pthread_exit>:
pthread_exit():
 d82:	1141                	add	sp,sp,-16
 d84:	e022                	sd	s0,0(sp)
 d86:	4581                	li	a1,0
 d88:	842a                	mv	s0,a0
 d8a:	4505                	li	a0,1
 d8c:	e406                	sd	ra,8(sp)
 d8e:	00000097          	auipc	ra,0x0	d8e: R_RISCV_CALL_PLT	task_setcancelstate
	d8e: R_RISCV_RELAX	*ABS*
 d92:	000080e7          	jalr	ra # d8e <pthread_exit+0xc>
 d96:	8522                	mv	a0,s0
 d98:	00000097          	auipc	ra,0x0	d98: R_RISCV_CALL_PLT	nx_pthread_exit
	d98: R_RISCV_RELAX	*ABS*
 d9c:	000080e7          	jalr	ra # d98 <pthread_exit+0x16>

0000000000000da0 <abort>:
abort():
 da0:	1141                	add	sp,sp,-16
 da2:	4505                	li	a0,1
 da4:	e406                	sd	ra,8(sp)
 da6:	00000097          	auipc	ra,0x0	da6: R_RISCV_CALL_PLT	_exit
	da6: R_RISCV_RELAX	*ABS*
 daa:	000080e7          	jalr	ra # da6 <abort+0x6>

0000000000000dae <_assert>:
_assert():
 dae:	88aa                	mv	a7,a0
 db0:	882e                	mv	a6,a1
 db2:	87b2                	mv	a5,a2
 db4:	8736                	mv	a4,a3
 db6:	451d                	li	a0,7
 db8:	85c6                	mv	a1,a7
 dba:	8642                	mv	a2,a6
 dbc:	86be                	mv	a3,a5
 dbe:	00000073          	ecall
 dc2:	0001                	nop
 dc4:	8082                	ret

0000000000000dc6 <_exit>:
_exit():
 dc6:	85aa                	mv	a1,a0
 dc8:	4519                	li	a0,6
 dca:	00000073          	ecall
 dce:	0001                	nop

0000000000000dd0 <.L2>:
 dd0:	a001                	j	dd0 <.L2>	dd0: R_RISCV_RVC_JUMP	.L2

0000000000000dd2 <clock_gettime>:
clock_gettime():
 dd2:	87aa                	mv	a5,a0
 dd4:	862e                	mv	a2,a1
 dd6:	03200513          	li	a0,50
 dda:	85be                	mv	a1,a5
 ddc:	00000073          	ecall
 de0:	0001                	nop
 de2:	2501                	sext.w	a0,a0
 de4:	8082                	ret

0000000000000de6 <gettid>:
gettid():
 de6:	4525                	li	a0,9
 de8:	00000073          	ecall
 dec:	0001                	nop
 dee:	2501                	sext.w	a0,a0
 df0:	8082                	ret

0000000000000df2 <lseek>:
lseek():
 df2:	872a                	mv	a4,a0
 df4:	87ae                	mv	a5,a1
 df6:	86b2                	mv	a3,a2
 df8:	04d00513          	li	a0,77
 dfc:	85ba                	mv	a1,a4
 dfe:	863e                	mv	a2,a5
 e00:	00000073          	ecall
 e04:	0001                	nop
 e06:	2501                	sext.w	a0,a0
 e08:	8082                	ret

0000000000000e0a <nx_pthread_exit>:
nx_pthread_exit():
 e0a:	85aa                	mv	a1,a0
 e0c:	06f00513          	li	a0,111
 e10:	00000073          	ecall
 e14:	0001                	nop

0000000000000e16 <.L2>:
 e16:	a001                	j	e16 <.L2>	e16: R_RISCV_RVC_JUMP	.L2

0000000000000e18 <nxsem_clockwait>:
nxsem_clockwait():
 e18:	872a                	mv	a4,a0
 e1a:	87ae                	mv	a5,a1
 e1c:	86b2                	mv	a3,a2
 e1e:	4571                	li	a0,28
 e20:	85ba                	mv	a1,a4
 e22:	863e                	mv	a2,a5
 e24:	00000073          	ecall
 e28:	0001                	nop
 e2a:	2501                	sext.w	a0,a0
 e2c:	8082                	ret

0000000000000e2e <nxsem_destroy>:
nxsem_destroy():
 e2e:	85aa                	mv	a1,a0
 e30:	4569                	li	a0,26
 e32:	00000073          	ecall
 e36:	0001                	nop
 e38:	2501                	sext.w	a0,a0
 e3a:	8082                	ret

0000000000000e3c <nxsem_post>:
nxsem_post():
 e3c:	85aa                	mv	a1,a0
 e3e:	456d                	li	a0,27
 e40:	00000073          	ecall
 e44:	0001                	nop
 e46:	2501                	sext.w	a0,a0
 e48:	8082                	ret

0000000000000e4a <nxsem_trywait>:
nxsem_trywait():
 e4a:	85aa                	mv	a1,a0
 e4c:	4579                	li	a0,30
 e4e:	00000073          	ecall
 e52:	0001                	nop
 e54:	2501                	sext.w	a0,a0
 e56:	8082                	ret

0000000000000e58 <nxsem_wait>:
nxsem_wait():
 e58:	85aa                	mv	a1,a0
 e5a:	457d                	li	a0,31
 e5c:	00000073          	ecall
 e60:	0001                	nop
 e62:	2501                	sext.w	a0,a0
 e64:	8082                	ret

0000000000000e66 <write>:
write():
 e66:	872a                	mv	a4,a0
 e68:	87ae                	mv	a5,a1
 e6a:	86b2                	mv	a3,a2
 e6c:	03f00513          	li	a0,63
 e70:	85ba                	mv	a1,a4
 e72:	863e                	mv	a2,a5
 e74:	00000073          	ecall
 e78:	0001                	nop
 e7a:	8082                	ret
